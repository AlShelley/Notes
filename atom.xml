<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lonelyorのblog]]></title>
  <link href="www.lonelyor.org/lonelyorNotes/atom.xml" rel="self"/>
  <link href="www.lonelyor.org/lonelyorNotes/"/>
  <updated>2018-11-28T10:50:54+08:00</updated>
  <id>www.lonelyor.org/lonelyorNotes/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[windows右键添加管理员获得所有权]]></title>
    <link href="www.lonelyor.org/lonelyorNotes/15428715286450.html"/>
    <updated>2018-11-22T15:25:28+08:00</updated>
    <id>www.lonelyor.org/lonelyorNotes/15428715286450.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>右键添加获得管理员所有权是个比较方便的功能。</p>
</blockquote>

<p>打开记事本或者别的文本编辑器，然后写入如下内容:</p>

<pre class="line-numbers"><code class="language-cmd">Windows Registry Editor Version 5.00

[HKEY_CLASSES_ROOT\*\shell\runas]
@=&quot;管理员取得所有权&quot;
&quot;NoWorkingDirectory&quot;=&quot;&quot;
[HKEY_CLASSES_ROOT\*\shell\runas\command]
@=&quot;cmd.exe /c takeown /f \&quot;%1\&quot; &amp;&amp; icacls \&quot;%1\&quot; /grant administrators:F&quot;
&quot;IsolatedCommand&quot;=&quot;cmd.exe /c takeown /f \&quot;%1\&quot; &amp;&amp; icacls \&quot;%1\&quot; /grant administrators:F&quot;
[HKEY_CLASSES_ROOT\exefile\shell\runas2]
@=&quot;管理员取得所有权&quot;
&quot;NoWorkingDirectory&quot;=&quot;&quot;
[HKEY_CLASSES_ROOT\exefile\shell\runas2\command]
@=&quot;cmd.exe /c takeown /f \&quot;%1\&quot; &amp;&amp; icacls \&quot;%1\&quot; /grant administrators:F&quot;
&quot;IsolatedCommand&quot;=&quot;cmd.exe /c takeown /f \&quot;%1\&quot; &amp;&amp; icacls \&quot;%1\&quot; /grant administrators:F&quot;
[HKEY_CLASSES_ROOT\Directory\shell\runas]
@=&quot;管理员取得所有权&quot;
&quot;NoWorkingDirectory&quot;=&quot;&quot;
[HKEY_CLASSES_ROOT\Directory\shell\runas\command]
@=&quot;cmd.exe /c takeown /f \&quot;%1\&quot; /r /d y &amp;&amp; icacls \&quot;%1\&quot; /grant administrators:F /t&quot;
&quot;IsolatedCommand&quot;=&quot;cmd.exe /c takeown /f \&quot;%1\&quot; /r /d y &amp;&amp; icacls \&quot;%1\&quot; /grant administrators:F /t&quot;
</code></pre>

<p>然后另存为：管理员获得所有权.reg<br/>
文件名可以随便写，但是后缀记得写成reg（改成这个后缀后文件图标就会变成一个破碎蓝色魔方）。<br/>
然后右键以管理员身份运行，若弹框注册表xxx的，同意就行了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux将shell脚本添加到系统命令的方法]]></title>
    <link href="www.lonelyor.org/lonelyorNotes/15428714021434.html"/>
    <updated>2018-11-22T15:23:22+08:00</updated>
    <id>www.lonelyor.org/lonelyorNotes/15428714021434.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>可以自定义一些shell脚本，用来提高执行常用组合命令的效率。还有一种方式是使用alias命令。</p>
</blockquote>

<p>两种方法：<br/>
1、直接把shell脚本放到/usr/local/bin ，然后添加权限 <code>sudo chmod +x xxx.sh</code> 就ok了。这样是在本地用户添加命令。<br/>
root用户添加命令则把脚本放在 /usr/bin 即可。<br/>
2、使用软连接的方式<code>ln -s 【源文件或目录】【目标文件或目录】</code><br/>
注意要使用绝对路径。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CRLF注入]]></title>
    <link href="www.lonelyor.org/lonelyorNotes/15428712896668.html"/>
    <updated>2018-11-22T15:21:29+08:00</updated>
    <id>www.lonelyor.org/lonelyorNotes/15428712896668.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>文章翻译自OWASP的<a href="https://www.owasp.org/index.php/CRLF_Injection">CRLF_Injection</a></p>
</blockquote>

<p>CRLF即回车Carriage Return (ASCII 13, \r) 和 换行 Line Feed (ASCII 10, \n)。他们被用于注释掉一行的终止。不过不同系统的处理方式有点不同。windows中，CR和LF都被用于注释掉一行的结尾，而linux/unix中只需要一个LF。在HTTP协议中，CRLF序列始终用于一行的终止。<br/>
当用户设法将CRLF提交到应用程序时，可能发生CRLF注入攻击，这通常是通过修改HTTP参数或URL来完成。</p>

<p>CRLF注入可能产生这样的问题：</p>

<ul>
<li>HTTP响应拆分</li>
<li>日志注入<br/>
## HTTP响应拆分<br/>
通常，当出现以下情况时会发生HTTP响应拆分</li>
<li>数据通过不受信任的来源进入Web应用程序，如HTTP请求。</li>
<li>数据包含在发送给Web用户的HTTP响应标头中，而不会对恶意字符进行验证。<br/>
HTTP响应拆分是达到目的的手段而不是目的本身。<br/>
攻击方式如下：攻击者将恶意数据传递给易受攻击的应用程序，应用程序将数据包含在HTTP响应中。<br/>
要成功利用漏洞，应用程序必须允许<strong>包含有 CR（回车，即 %0d 或者 \r\n）和 LF（换行符，%0a 或者 \n）的输入在header中</strong>和<strong>底层平台必须容易注入这样的字符</strong>。</li>
</ul>

<p><em>大多数现代应用程序服务器(无论用什么语言编写的代码)，都已经不存在HTTP响应拆分漏洞。</em></p>

<p>下面上一段java代码来举例说明：</p>

<pre class="line-numbers"><code class="language-java">String author = request.getParameter(AUTHOR_PARAM);
...
Cookie cookie = new Cookie(&quot;author&quot;, author);
      cookie.setMaxAge(cookieExpiration);
      response.addCookie(cookie);
</code></pre>

<p>上述代码的意思是：从客户端HTTP请求中接受参数（author），并将其设置在HTTP响应的cookie头中。<br/>
如果我们正常提交数据(author=lonelyor)，HTTP响应应该是这样：</p>

<pre class="line-numbers"><code class="language-java">HTTP/1.1 200 OK
...
Set-Cookie: author=Jane Smith
...
</code></pre>

<p>但是，由于源代码中的cookie是由未经验证的用户输入组成的，因此如果我们提交恶意代码<code>Hacker By xxx\r\nContent-Length:45\r\n\r\n...</code>则HTTP响应将被拆分为原始响应和伪造响应。</p>

<pre class="line-numbers"><code class="language-java">HTTP/1.1 200 OK
    ...
    Set-Cookie: author=Hacker By xxx
    Content-Length: 999
    
    &lt;html&gt;恶意内容...&lt;/html&gt; (这个例子中为第999个字符)
    原始内容以1000开头, 现在被浏览器忽略了...
</code></pre>

<h3 id="toc_0">危害</h3>

<p>攻击者构建任意HTTP响应的能力可能导致以下攻击：<br/>
跨用户污染（Cross-User_Defacement）——利用条件很苛刻<br/>
缓存中毒（Cache_Poisoning）——利用条件很苛刻<br/>
XSS跨站脚本攻击<br/>
页面劫持</p>

<h2 id="toc_1">日志注入</h2>

<p>将未经验证的用户输入写入日志文件可能导致攻击者伪造日志或者将恶意内容注入日志。<br/>
以下情况可能导致日志伪造漏洞：</p>

<ul>
<li>数据从不受信任的来源进入应用程序</li>
<li>数据将写入应用程序或者系统日志文件</li>
</ul>

<p>下面上一段java代码来举例说明：</p>

<pre class="line-numbers"><code class="language-java">...
String val = request.getParameter(&quot;val&quot;);
try {
  int value = Integer.parseInt(val);
}
catch (NumberFormatException) {
  log.info(&quot;Failed to parse val = &quot; + val);
}
...
</code></pre>

<p>上述代码的功能是，从请求对象中读取整数值，如果该值无法解析为整数，则会记录输入，并显示一条错误信息。<br/>
如果用户提交字符串“one”，则会记录以下条目<br/>
<code>INFO: Failed to parse val=one</code><br/>
然而，如果攻击者提交字符串<code>one%0a%0aINFO:+User+logged+out%3dbadguy</code>则会在日志中显示：</p>

<pre class="line-numbers"><code class="language-text">    INFO: Failed to parse val=one

    INFO: User logged out=badguy
</code></pre>

<p>显然攻击者可以使用相同机制插入任意日志条目。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[burpsuite设置上游代理]]></title>
    <link href="www.lonelyor.org/lonelyorNotes/15428711597348.html"/>
    <updated>2018-11-22T15:19:19+08:00</updated>
    <id>www.lonelyor.org/lonelyorNotes/15428711597348.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>burpsuite的使用技巧之一，设置上游代理。比如测试境外网站时可能需要[fanqiang]才能访问，此时这个技巧就能用得上了。</p>
</blockquote>

<p><img src="http://images.lonelyor.org/burp%E8%AE%BE%E7%BD%AE%E4%B8%8A%E6%B8%B8%E4%BB%A3%E7%90%8620180823161146.png" alt="burp设置上游代理20180823161146"/></p>

<p>1、在浏览器中设置burp代理以保证可以抓包<br/>
2、开启上游代理<br/>
3、在burp的图中所示位置设置上游代理</p>

<p>打完收工</p>

<h2 id="toc_0">参考链接</h2>

<p><a href="http://www.360zhijia.com/360anquanke/191737.html">http://www.360zhijia.com/360anquanke/191737.html</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[更优雅的使用Hexo写博客]]></title>
    <link href="www.lonelyor.org/lonelyorNotes/15428708110510.html"/>
    <updated>2018-11-22T15:13:31+08:00</updated>
    <id>www.lonelyor.org/lonelyorNotes/15428708110510.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>曾经的博客是使用 Hexo 写的，我觉得Hexo这种在文章前面写上元信息的方式很棒。然而，每此写markdown文档都要输入这些元信息，这很麻烦，所以就写了个shell脚本来自动化输入文件元信息的过程。<br/>
代码如下：</p>
</blockquote>

<pre class="line-numbers"><code class="language-bash">#!/bin/bash

printf &quot;请输入文件名(example.md)，记得写后缀!\n&quot;
read -p &quot;文件名是: &quot; filename
# 这里的title取文件名不取后缀
echo &quot;title: &quot;${filename%.*} &gt;&gt; $filename
echo &quot;author: lonelyor&quot; &gt;&gt; $filename
echo &quot;language: zh-CN&quot; &gt;&gt; $filename
echo &quot;tags:&quot; &gt;&gt; $filename
echo &quot;  - 标签&quot; &gt;&gt; $filename
echo &quot;categories:&quot; &gt;&gt; $filename
echo &quot;  - 分类&quot; &gt;&gt; $filename
time=$(date &quot;+%Y-%m-%d %H:%M:%S&quot;)
echo &quot;date: ${time}&quot;&gt;&gt; $filename
echo &quot;---&quot; &gt;&gt; $filename
echo &quot;&gt; description: &quot; &gt;&gt; $filename
# printf和echo都是输出，&gt;&gt;表示追加，&gt;会覆盖文件
# shell中使用变量需要先定义变量，然后使用时加 $
# read 用来创建文件，文件名从终端获取
</code></pre>

<p>展示效果如下:</p>

<pre class="line-numbers"><code class="language-md">title: 如何优雅的创建markdown文件
author: lonelyor
language: zh-CN
tags:
  - Hexo
  - markdown
categories:
  - 技术杂文
date: 2018-09-06 17:42:40
---
&gt; description: 若爱请深爱，若不爱请离开。
</code></pre>

<p>接下来说说如何使用(仅限linux、macos，或者说可以执行bash的环境，win用户请自行转换成bat)：<br/>
首先，创建一个名叫 md.sh 的文件（名字你爱咋咋地），把代码copy进去。<br/>
然后，<code>ln -s /md文件绝对路径 /usr/local/bin/md</code> ,这条语句的意思就是创建一个软连接，把 md.sh 连接到当前用户的 md 命令上。<br/>
最后，打开终端输入 md ，然后输入要创建的markdown文件名（如：test.md），即可在当前目录下创建带有元信息的markdown文件。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web漏洞分类checklist]]></title>
    <link href="www.lonelyor.org/lonelyorNotes/15428591301433.html"/>
    <updated>2018-11-22T11:58:50+08:00</updated>
    <id>www.lonelyor.org/lonelyorNotes/15428591301433.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>写上一个漏洞分类的checklist，方便以后补充漏洞检测方案以及更多相关内容的学习。这里面的内容不是全部，因为后续还会更新，但是更多新的内容会不会更新到博客，就不知道了。</p>
</blockquote>

<h1 id="toc_0">爆破</h1>

<p>系统、网络、应用弱口令<br/>
网站目录遍历/文件遍历<br/>
端口扫描<br/>
用户枚举和可猜测用户名<br/>
短信/邮箱轰炸<br/>
短文件名漏洞</p>

<h1 id="toc_1">不安全配置</h1>

<p>Nginx<br/>
HTTP Headers设置不当<br/>
rebots.txt<br/>
错误处理不当<br/>
flash跨域策略配置不当</p>

<p>安全配置checklist<br/>
    Web应用服务器<br/>
    数据库<br/>
    系统<br/>
    应用</p>

<h1 id="toc_2">敏感信息泄露</h1>

<p>个人敏感信息定义<br/>
应用debug信息泄露<br/>
应用堆栈信息泄露<br/>
备份文件/测试页面泄露<br/>
本地敏感信息泄露（前端保存用户密码/验证码）</p>

<h1 id="toc_3">xss跨站脚本</h1>

<p>反射型<br/>
存储型<br/>
dom型<br/>
xss蠕虫</p>

<h1 id="toc_4">请求伪造</h1>

<p>csrf跨站请求伪造<br/>
ssrf服务端请求伪造</p>

<h1 id="toc_5">注入</h1>

<p>SQL注入<br/>
CRLF注入<br/>
LDAP注入<br/>
XML注入<br/>
HTTP参数污染（HPP）<br/>
HTML注入<br/>
客户端模板注入（CSTI）<br/>
服务端模板注入（SSTI）<br/>
服务器端包含注入（SSI）<br/>
Python代码注入<br/>
PHP代码注入<br/>
反序列化漏洞</p>

<h1 id="toc_6">使用已知漏洞组件</h1>

<p>低版本组件<br/>
0day<br/>
经典漏洞（heartbleed/struts2）</p>

<h1 id="toc_7">文件类漏洞</h1>

<p>文件包含<br/>
任意文件创建/读取/上传/下载/删除</p>

<h1 id="toc_8">文件解析漏洞</h1>

<p>IIS解析漏洞<br/>
Nginx解析漏洞<br/>
Apache解析漏洞<br/>
PHP CGI解析漏洞</p>

<h1 id="toc_9">劫持类漏洞</h1>

<p>点击劫持<br/>
Jsonp劫持<br/>
WebSocket劫持<br/>
DNS劫持<br/>
二维码劫持<br/>
子域名劫持</p>

<h1 id="toc_10">业务逻辑漏洞</h1>

<p>认证<br/>
授权<br/>
会话管理</p>

<p>业务逻辑漏洞挖掘的核心是业务<br/>
对业务越熟悉，成功率越高。</p>

<p>我对业务逻辑漏洞的分类可以从两个角度来分：一、根据漏洞类型分类；二、根据业务场景分类。<br/>
业务场景举例：<br/>
    账户体系（登录、注册、改密、销户、双因素认证、上传头像、个人信息等）<br/>
    验证码（绕过、识别）<br/>
    优惠活动（优惠券、抽奖、任务、答题、刷赞、定时优惠、新用户优惠等）<br/>
    内容安全（搜索框、富文本编辑器、上传、反爬虫、社交、隐式接口、资料查询等）<br/>
    支付相关（0元支付、最大/小金额溢出、负数支付、提现、订单泄露、身份盗用、竞争条件漏洞等）</p>

<h1 id="toc_11">API安全</h1>

<p>认证<br/>
授权<br/>
会话管理<br/>
输入和输出<br/>
加密</p>

<p>未完待续...</p>

]]></content>
  </entry>
  
</feed>
