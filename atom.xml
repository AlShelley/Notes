<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lonelyorのblog]]></title>
  <link href="www.lonelyor.org/lonelyorNotes/atom.xml" rel="self"/>
  <link href="www.lonelyor.org/lonelyorNotes/"/>
  <updated>2018-12-21T14:39:24+08:00</updated>
  <id>www.lonelyor.org/lonelyorNotes/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[Pycharm编程遇到的技巧]]></title>
    <link href="www.lonelyor.org/lonelyorNotes/15453720146052.html"/>
    <updated>2018-12-21T14:00:14+08:00</updated>
    <id>www.lonelyor.org/lonelyorNotes/15453720146052.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">pycharm技巧</h2>

<p>ctrl+z 撤回<br/>
全部选中然后tab是全部缩进<br/>
全部选中然后shift+tab是全部反缩进</p>

<h2 id="toc_1">编程技巧</h2>

<p>dir()    #输出函数包含的方法<br/>
type() #输出类型</p>

<p>更多技巧可以查阅官方文档的使用帮助。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[npm Cannot find module 'semver' --解决方案]]></title>
    <link href="www.lonelyor.org/lonelyorNotes/15453717965995.html"/>
    <updated>2018-12-21T13:56:36+08:00</updated>
    <id>www.lonelyor.org/lonelyorNotes/15453717965995.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p><a href="https://blog.csdn.net/hanshuonb/article/details/77969080">https://blog.csdn.net/hanshuonb/article/details/77969080</a></p>
</blockquote>

<p>度娘上面我没有找到相关的解决方法所以只能去Stack Overflow上寻找答案，找到的结果是这样的：</p>

<pre class="line-numbers"><code class="language-text">sudo rm -rf /usr/local/lib/node_modules
sudo rm -rf ~/.npm
brew uninstall --force node
brew install node
</code></pre>

<p>上面命令的意思删除所有全局包和.npm文件夹，重新安装node。 <br/>
这种方法我没试过，因为肯定有很多小伙伴安装了除npm之外的全局包比如express、webpack等等，如果不考虑清楚直接全删了的话。。。后果惨不忍睹。。。(ps:因为本人英语实在不好，所以经常直接傻瓜式粘命令，提醒小伙伴们最好粘命令之前去查查是什么意思，否则出了问题有可能都没法回退。。。)</p>

<p>说了这么多，下面切入正题 <br/>
首先需要知道为啥有报这个错，可以到全局的npm包看一下，路径是</p>

<p><code>/usr/local/lib/node_modules/npm</code><br/>
进入npm的node_modules中的semver文件夹可以看到里面变成空的了！具体的原因不好意思我没有深究，但是我觉得一定和yarn是有关系的。不仅如此，你会看到其他的文件夹也基本都是变成空的了，这下咱们就知道为啥报semver这个module找不到了吧！</p>

<p>网上还有解决方法是说用 <code>npm unintall npm -g</code> 删除npm包，实测不好使。。。npm所有的命令都不行了 uninstall肯定也不行了啊！！！</p>

<h2 id="toc_0">我的解决方法：</h2>

<p>1.先删除全局的npm包：也就是把刚才提到的<code>/usr/local/lib/node_modules/npm</code>，这个npm文件夹删除掉 <br/>
2.回到<code>/usr/local/lib/node_modules</code>这个目录，从GitHub上重新clone下git包 <br/>
终端:<br/>
<code>git clone --recursive git://github.com/isaacs/npm.git</code><br/>
这样新的npm包就回到了全局node_modules中 <br/>
3.打开终端输入<br/>
<code>npm -v</code><br/>
看一下npm是否可以打印出版本号，如果可以，npm就可以正常使用啦！</p>

<p>说白了就是：</p>

<pre class="line-numbers"><code class="language-text">rm -rf /usr/local/lib/node_modules/npm
cd /usr/local/lib/node_modules
git clone --recursive git://github.com/isaacs/npm.git`
</code></pre>

<p>搞定</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mongodb安装配置（arch）]]></title>
    <link href="www.lonelyor.org/lonelyorNotes/15453716917526.html"/>
    <updated>2018-12-21T13:54:51+08:00</updated>
    <id>www.lonelyor.org/lonelyorNotes/15453716917526.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>参考文档：<a href="https://wiki.archlinux.org/index.php/MongoDB_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#.E4.BD.BF.E7.94.A8">https://wiki.archlinux.org/index.php/MongoDB_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#.E4.BD.BF.E7.94.A8</a></p>
</blockquote>

<p><code>pacman -S mongo</code><br/>
<code>/usr/bin/.mongo --help</code><br/>
<code>systemctl start mongodb.service</code><br/>
这样就启动了mongo，启动的配置文件是：<code>cat /etc/mongodb.conf</code><br/>
然后退出到用户目录，运行mongo<br/>
<code>~ ❯❯❯ mongo</code><br/>
<code>/var/lib/mongodb/ 是Arch Linux 的 ** 默认dbpath**</code><br/>
但是无法访问<br/>
修改mongodb的用户组为自己的<br/>
<code>chown mongodb:lonelyor mongodb</code></p>

<p><code>mkdir /home/lonelyor/工作/mongodb</code><br/>
<code>touch /home/lonelyor/工作/mongodb/data</code><br/>
<code>touch /home/lonelyor/工作/mongodb/logs</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux安装配置aria2及其Web图形界面（debian为例）]]></title>
    <link href="www.lonelyor.org/lonelyorNotes/15453714645346.html"/>
    <updated>2018-12-21T13:51:04+08:00</updated>
    <id>www.lonelyor.org/lonelyorNotes/15453714645346.html</id>
    <content type="html"><![CDATA[
<p>下载aria2：apt-get install aria2<br/>
创建配置文件：mkdir /etc/aria2_conf/aria2.conf<br/>
编辑配置文件：nano /etc/aria2_conf/aria2.conf</p>

<p>aria2.conf配置：</p>

<pre class="line-numbers"><code class="language-text">#用户名
#rpc-user=user
#密码
#rpc-passwd=passwd
#上面的认证方式不建议使用,建议使用下面的token方式
#设置加密的密钥
rpc-secret=token
#允许rpc
enable-rpc=true
#允许所有来源, web界面跨域权限需要
rpc-allow-origin-all=true
#允许外部访问，false的话只监听本地端口
rpc-listen-all=true
#RPC端口, 仅当默认端口被占用时修改
rpc-listen-port=6800
#最大同时下载数(任务数), 路由建议值: 3
max-concurrent-downloads=5
#断点续传
continue=true
#同服务器连接数
max-connection-per-server=5
#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要
min-split-size=10M
#单文件最大线程数, 路由建议值: 5
split=10
#下载速度限制
max-overall-download-limit=0
#单文件速度限制
max-download-limit=0
#上传速度限制
max-overall-upload-limit=0
#单文件速度限制
max-upload-limit=0
#断开速度过慢的连接
#lowest-speed-limit=0
#验证用，需要1.16.1之后的release版本
#referer=*
#文件保存路径, 默认为当前启动位置
dir=/root/downloads
#文件缓存, 使用内置的文件缓存, 如果你不相信Linux内核文件缓存和磁盘内置缓存时使用, 需要1.16及以上版本
#disk-cache=0
#另一种Linux文件缓存方式, 使用前确保您使用的内核支持此选项, 需要1.15及以上版本(?)
#enable-mmap=true
#文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长
#所需时间 none &lt; falloc ? trunc &lt;&lt; prealloc, falloc和trunc需要文件系统和内核支持
file-allocation=prealloc
</code></pre>

<p>然后配置开机启动：<br/>
<code>nano /etc/init.d/aria2</code></p>

<pre class="line-numbers"><code class="language-text">#!/bin/bash
#
# aria2 - this script starts and stops the aria2 daemon
#
# chkconfig:   - 85 15
# description: Aria2 - Download Manager
# processname: aria2c
# config:      /etc/aria2/aria2.conf
# pidfile:

# Source function library.
. /etc/rc.d/init.d/functions

# Source networking configuration.
. /etc/sysconfig/network

# Check that networking is up.
[ &quot;$NETWORKING&quot; = &quot;no&quot; ] &amp;&amp; exit 0

aria2c=&quot;/usr/bin/aria2c&quot;
ARIA2C_CONF_FILE=&quot;/etc/aria2/aria2.conf&quot;
options=&quot; --conf-path=$ARIA2C_CONF_FILE -D &quot;

RETVAL=0

start() {
    # code here to start the program
    echo -n &quot;Starting aria2c daemon.&quot;
    ${aria2c} ${options}
    RETVAL=$?
    echo
}

stop() {
    echo -n &quot;Shutting down aria2c daemon.&quot;
    /usr/bin/killall aria2c
    RETVAL=$?
    echo
}

status() {
    ID=$(/bin/ps -ef | grep &#39;aria2c&#39; | grep -v &#39;grep&#39; | awk &#39;{print $2}&#39;)
    if [[ &quot;x$ID&quot; != &quot;x&quot; ]]; then
            echo &quot;Aria2 is running.&quot;
    else
            echo &quot;Aria2 is not running.&quot;
    fi
}

restart() {
    stop
    sleep 3
    start
}

case &quot;$1&quot; in
    start)
            start
            ;;
    stop)
            stop
            ;;
    status)
            status
            ;;
    restart)
            restart
            ;;
    *)
            echo &quot;Usage: service aria2c {start|stop|restart}&quot;
            RETVAL=1
esac

exit $RETVAL
</code></pre>

<p>使用以下命令来立即启动 Aria2：</p>

<p><code>/usr/bin/aria2c --conf-path=/etc/aria2_conf/aria2.conf -D</code></p>

<p>保存之后配置 WebUI，首先开启 Web 服务，然后安装 WebUI 到指定目录，比如我的目录是/opt/aria2webUI/<br/>
<code>git clone https://github.com/ziahamza/webui-aria2.git</code><br/>
这样就下载了 WebUI，然后用 nginx 反代这个文件就ok了。</p>

<p>nginx(/etc/nginx/conf.d/aria2.conf)配置文件如下：</p>

<pre class="line-numbers"><code class="language-text">aria2.conf

server
{
listen 80;
server_name aria2.lonelyor.org;
location / {
    root /opt/aria2webUI/;
}
access_log logs/aria2_access.log;
}
</code></pre>

<p>然后打开浏览器访问 aria2.lonelyor.org 就可以了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux下搜狗输入法不能用的解决办法]]></title>
    <link href="www.lonelyor.org/lonelyorNotes/15453713553710.html"/>
    <updated>2018-12-21T13:49:15+08:00</updated>
    <id>www.lonelyor.org/lonelyorNotes/15453713553710.html</id>
    <content type="html"><![CDATA[
<p>删除<br/>
<code>～/config</code><br/>
下的<br/>
<code>sogou-qimpanel</code><br/>
<code>SogouPY</code><br/>
<code>SogouPY.users</code><br/>
这三个文件夹，然后重启。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[arch设置屏幕分辨率]]></title>
    <link href="www.lonelyor.org/lonelyorNotes/15453712257423.html"/>
    <updated>2018-12-21T13:47:05+08:00</updated>
    <id>www.lonelyor.org/lonelyorNotes/15453712257423.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p><a href="https://wiki.archlinux.org/index.php/Xrandr_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/index.php/Xrandr_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p>
</blockquote>

<p>1、先使用xrandr查看屏幕相关信息<br/>
2、编辑/e/X/xorg.conf.d ❯❯❯ sudo nano 11-lonelyorx.conf (自己新建)<br/>
结果我不怎么会写配置文件，导致写了都没法启动图形界面了，于是又删了，打算手动更改。<br/>
3、<br/>
xrandr查看当前设置 <br/>
<code>cvt 1920 1080</code><br/>
<code>cvt 2560 1440</code><br/>
找到正确的参数 <br/>
<code>xrandr --newmode &quot;1920x1080_60.00&quot;  173.00  1920 2048 2248 2576  1080 1083 1088 1120 -hsync +vsync</code><br/>
<code>xrandr --newmode &quot;2560x1440_60.00&quot;  312.25  2560 2752 3024 3488  1440 1443 1448 1493 -hsync +vsync</code><br/>
然后设置 <br/>
<code>xrandr --addmode eDP1 1920x1080_60.00</code><br/>
<code>xrandr --addmode HDMI1 2560x1440_60.00</code><br/>
如果一且顺利的话，此时再查看xrandr命令，将发现最佳分辨率设置成功。 <br/>
4、修改分辨率<br/>
<code>xrandr --output eDP1 --mode 1920x1080_60.00</code><br/>
<code>xrandr --output HDMI1 --mode 2560x1440_60.00</code></p>

<p><code>xrandr --newmode &quot;1920x1080_60.00&quot;  173.00  1920 2048 2248 2576  1080 1083 1088 1120 -hsync +vsync</code><br/>
<code>xrandr --addmode eDP1 1920x1080_60.00</code><br/>
<code>xrandr --output eDP1 --mode 1920x1080_60.00</code></p>

<p>这样屏幕分辨率就变成1080p了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python弱口令脚本的一点备注]]></title>
    <link href="www.lonelyor.org/lonelyorNotes/15453709108643.html"/>
    <updated>2018-12-21T13:41:50+08:00</updated>
    <id>www.lonelyor.org/lonelyorNotes/15453709108643.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>很久以前写的</p>
</blockquote>

<p>跑弱口令的脚本<br/>
不要使用字典这种操作，这不利于跑大量数据的场景。<br/>
应该制定规则去跑，比如：<br/>
取出一个用户名，然后根据规则生成弱口令，然后再去匹配用户名对应的密码，匹配则是弱口令，不匹配则不是弱口令。<br/>
这样可以后续变成一个服务，用户输入密码，触发了规则则告诉他密码是弱口令。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[msf安装与维护]]></title>
    <link href="www.lonelyor.org/lonelyorNotes/15453707290429.html"/>
    <updated>2018-12-21T13:38:49+08:00</updated>
    <id>www.lonelyor.org/lonelyorNotes/15453707290429.html</id>
    <content type="html"><![CDATA[
<p><code>curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstall &amp;&amp; \<br/>
  chmod 755 msfinstall &amp;&amp; \<br/>
  ./msfinstall</code></p>

<p>上面是官方提供的一键安装脚本</p>

<p>使用msfupdate可以进行更新</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[查看端口占用]]></title>
    <link href="www.lonelyor.org/lonelyorNotes/15453706658952.html"/>
    <updated>2018-12-21T13:37:45+08:00</updated>
    <id>www.lonelyor.org/lonelyorNotes/15453706658952.html</id>
    <content type="html"><![CDATA[
<p>使用命令：<br/>
<code>lsof -i:8000</code><br/>
或<br/>
<code>netstat -tunlp|grep 8000</code><br/>
均可。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fsarchiver备份文件介绍]]></title>
    <link href="www.lonelyor.org/lonelyorNotes/15453705663839.html"/>
    <updated>2018-12-21T13:36:06+08:00</updated>
    <id>www.lonelyor.org/lonelyorNotes/15453705663839.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>多年以前的笔记</p>
</blockquote>

<p>fsarchiver安装<br/>
<code>apt-get install fsarchiver</code></p>

<pre class="line-numbers"><code class="language-text"># 对于备份操作，我们需要以只读形式重新挂载文件系统或者有条件的话直接卸载。也可以-A忽略
[peter@test88 ~]$ sudo /home/peter/fsarchiver savefs backup.fsa /dev/sdb1
oper_save.c#938,filesystem_mount_partition(): partition [/dev/sdb1] is mounted read/write. please mount it read-only
and then try again. you can do &quot;mount -o remount,ro /dev/sdb1&quot;. you can
also run fsarchiver with option &#39;-A&#39; if you know what you are doing.
removed backup.fsa
 
# 对于恢复操作，我们必须先卸载文件系统。
[peter@test88 ~]$ sudo /home/peter/fsarchiver restfs backup2.fsa id=0,dest=/dev/sdb2
oper_restore.c#1230,extractar_filesystem_extract(): partition [/dev/sdb2] is mounted on [/home/peter/sder].
cannot restore an archive to a partition which is mounted, unmount it first: umount /home/peter/sder
 
# 创建文件系统备份
# 可以将多个文件系统备份在一个文件中
[peter@test88 ~]$ sudo /home/peter/fsarchiver savefs backup.fsa /dev/sdb1 /dev/sdb2
 
# 恢复文件系统
# id=0表明从归档中提取第一个文件系统的内容
[peter@test88 ~]$ sudo /home/peter/fsarchiver restfs backup.fsa id=0,dest=/dev/sdc1 id=1,dest=/dev/sdc2



# 软件说明文档
====&gt; fsarchiver version 0.8.1 (2017-01-10) - http://www.fsarchiver.org &lt;====           
Distributed under the GPL v2 license (GNU General Public License v2).                   
 * usage: fsarchiver [&lt;options&gt;] &lt;command&gt; &lt;archive&gt; [&lt;dev1&gt; [&lt;dev2&gt; [...]]]            
&lt;commands&gt;                                                                              
 * savefs: save filesystems to an archive file (backup a device to a file)              
 * restfs: restore filesystems from an archive (overwrites the existing data)           
 * savedir: save directories to the archive (similar to a compressed tarball)           
 * restdir: restore data from an archive which is not based on a filesystem             
 * archinfo: show information about an existing archive file and its contents           
 * probe [detailed]: show list of filesystems detected on the disks                     
&lt;options&gt;                                                                               
 -o: overwrite the archive if it already exists instead of failing                      
 -v: verbose mode (can be used several times to increase the level of details)          
 -d: debug mode (can be used several times to increase the level of details)            
 -A: allow to save a filesystem which is mounted in read-write (live backup)            
 -a: allow to save a filesystem when acls and xattrs are not supported                  
 -x: enable support for experimental features (they are disabled by default)            
 -e &lt;pattern&gt;: exclude files and directories that match that pattern                    
 -L &lt;label&gt;: set the label of the archive (comment about the contents)                  
 -z &lt;level&gt;: compression level from 1 (very fast) to 9 (very good) default=3            
 -s &lt;mbsize&gt;: split the archive into several files of &lt;mbsize&gt; megabytes each           
 -j &lt;count&gt;: create more than one (de)compression thread. useful on multi-core cpu      
 -c &lt;password&gt;: encrypt/decrypt data in archive, &quot;-c -&quot; for interactive password        
 -h: show help and information about how to use fsarchiver with examples                
 -V: show program version and exit                                                      
&lt;information&gt;                                                                           
 * Support included for: lzo=yes, lzma=yes                                              
 * Support for ntfs filesystems is unstable: don&#39;t use it for production.               
&lt;examples&gt;                                                                              
 * save only one filesystem (/dev/sda1) to an archive:                                  
   fsarchiver savefs /data/myarchive1.fsa /dev/sda1                                     
 * save two filesystems (/dev/sda1 and /dev/sdb1) to an archive:
   fsarchiver savefs /data/myarchive2.fsa /dev/sda1 /dev/sdb1
 * restore the first filesystem from an archive (first = number 0):
   fsarchiver restfs /data/myarchive2.fsa id=0,dest=/dev/sda1
 * restore the second filesystem from an archive (second = number 1):
   fsarchiver restfs /data/myarchive2.fsa id=1,dest=/dev/sdb1
 * restore two filesystems from an archive (number 0 and 1):
   fsarchiver restfs /data/arch2.fsa id=0,dest=/dev/sda1 id=1,dest=/dev/sdb1
 * restore a filesystem from an archive and convert it to reiserfs:
   fsarchiver restfs /data/myarchive1.fsa id=0,dest=/dev/sda1,mkfs=reiserfs
 * restore a filesystem from an archive and specify extra mkfs options:
   fsarchiver restfs /data/myarchive1.fsa id=0,dest=/dev/sda1,mkfs=ext4,mkfsopt=&quot;-I 256&quot;
 * restore a filesystem from an archive and specify a new label and a new UUID:
   fsarchiver restfs /data/myarchive1.fsa id=0,dest=/dev/sda1,label=root,uuid=5f6e5f4f-dc2a-4dbd-a6ea-9ca997cde75e
 * save the contents of /usr/src/linux to an archive (similar to tar):
   fsarchiver savedir /data/linux-sources.fsa /usr/src/linux
 * save a filesystem (/dev/sda1) to an archive split into volumes of 680MB:
   fsarchiver savefs -s 680 /data/myarchive1.fsa /dev/sda1
 * save a filesystem and exclude all files/dirs called &#39;pagefile.*&#39;:
   fsarchiver savefs /data/myarchive.fsa /dev/sda1 --exclude=&#39;pagefile.*&#39;
 * generic exclude for &#39;share&#39; such as &#39;/usr/share&#39; and &#39;/usr/local/share&#39;:
   fsarchiver savefs /data/myarchive.fsa --exclude=share
 * absolute exclude valid for &#39;/usr/share&#39; but not for &#39;/usr/local/share&#39;:
   fsarchiver savefs /data/myarchive.fsa --exclude=/usr/share
 * save a filesystem (/dev/sda1) to an encrypted archive:
   fsarchiver savefs -c mypassword /data/myarchive1.fsa /dev/sda1
 * same as before but prompt for password in the terminal:
   fsarchiver savefs -c - /data/myarchive1.fsa /dev/sda1
 * extract an archive made of simple files to /tmp/extract:
   fsarchiver restdir /data/linux-sources.fsa /tmp/extract
 * show information about an archive and its filesystems:
   fsarchiver archinfo /data/myarchive2.fsa
   ```
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fluxgui安装与卸载]]></title>
    <link href="www.lonelyor.org/lonelyorNotes/15453704835251.html"/>
    <updated>2018-12-21T13:34:43+08:00</updated>
    <id>www.lonelyor.org/lonelyorNotes/15453704835251.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>很久以前的笔记了</p>
</blockquote>

<pre class="line-numbers"><code class="language-text">Ubuntu/Debian Manual Install
# Install dependencies
sudo apt-get install git python-appindicator python-xdg python-pexpect python-gconf python-gtk2 python-glade2 libxxf86vm1

# Download fluxgui
cd /tmp
git clone &quot;https://github.com/xflux-gui/fluxgui.git&quot;
cd fluxgui
python download-xflux.py

# EITHER install globally
sudo python setup.py install
# EXCLUSIVE OR, install in your home directory. The binary installs
# into ~/.local/bin, so be sure to add that to your PATH if installing locally.
python setup.py install --user

# Run flux
fluxgui
Ubuntu/Debian Manual Uninstall
If you manually installed instead of using the PPA, you can uninstall by making setup.py tell you where it installed files and then removing the installed files.

# EITHER uninstall globally
sudo python setup.py install --record installed.txt
sudo xargs rm -vr &lt; installed.txt

# EXCLUSIVE OR uinstall in your home directory
python setup.py install --user --record installed.txt
xargs rm -vr &lt; installed.txt
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[backup系统备份工具介绍]]></title>
    <link href="www.lonelyor.org/lonelyorNotes/15453702906439.html"/>
    <updated>2018-12-21T13:31:30+08:00</updated>
    <id>www.lonelyor.org/lonelyorNotes/15453702906439.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>backup是一款强大的备份软件，用于系统备份、增量备份、远程备份，企业级。<br/>
我还是当年使用debian时用过...这是以前的笔记，留一份在这好了。</p>
</blockquote>

<p>软件安装（debian 9）<br/>
<code>apt-get install backuppc</code><br/>
然后会弹窗：<br/>
backuppc设定<br/>
管理web地址：<br/>
<code>http://lonelyor/backuppc</code><br/>
<code>user：backuppc</code><br/>
<code>passwd：u6oN2KE1</code><br/>
可以通过运行<code>htpasswd /etc/backuppc/htpasswd</code>来修改密码<br/>
这些信息要记住！</p>

<p>安装后：<br/>
<code>Creating config file /etc/backuppc/config.pl with new version（可以暂时忽略）</code></p>

<p>然后运行：<br/>
<code>systemctl restart apache2</code><br/>
<code>/etc/init.d/backuppc restart</code></p>

<p>接着就打开浏览器访问：<br/>
<code>http://lonelyor/backuppc</code><br/>
就能看到web管理界面了。<br/>
如果进不去可以打开隐身模式或者清除cookie再试。</p>

<p>官方安装文档：<code>http://backuppc.sourceforge.net/BackupPC-4.1.3.html#Installing-BackupPC</code></p>

<p>参考文档：<br/>
<code>http://server.zol.com.cn/513/5130348.html</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VMware14秘钥]]></title>
    <link href="www.lonelyor.org/lonelyorNotes/15453702115650.html"/>
    <updated>2018-12-21T13:30:11+08:00</updated>
    <id>www.lonelyor.org/lonelyorNotes/15453702115650.html</id>
    <content type="html"><![CDATA[
<p>CG54H-D8D0H-H8DHY-C6X7X-N2KG6<br/>
ZC3WK-AFXEK-488JP-A7MQX-XL8YF<br/>
AC5XK-0ZD4H-088HP-9NQZV-ZG2R4<br/>
ZC5XK-A6E0M-080XQ-04ZZG-YF08D<br/>
ZY5H0-D3Y8K-M89EZ-AYPEG-MYUA8<br/>
FF590-2DX83-M81LZ-XDM7E-MKUT4</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[v2ray使用方法]]></title>
    <link href="www.lonelyor.org/lonelyorNotes/15453701535252.html"/>
    <updated>2018-12-21T13:29:13+08:00</updated>
    <id>www.lonelyor.org/lonelyorNotes/15453701535252.html</id>
    <content type="html"><![CDATA[
<p>编辑 /etc/v2ray/config.json 文件来配置你需要的代理方式；</p>

<p>运行 service v2ray start 来启动 V2Ray 进程；<br/>
之后可以使用 service v2ray start|stop|status|reload|restart|force-reload 控制 V2Ray 的运行。</p>

<p>v2ray官网：<br/>
<a href="https://www.v2ray.com/chapter_00/install.html">https://www.v2ray.com/chapter_00/install.html</a><br/>
v2ray一键安装：<br/>
bash &lt;(curl -L -s <a href="https://install.direct/go.sh">https://install.direct/go.sh</a>)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用ssh科学上网]]></title>
    <link href="www.lonelyor.org/lonelyorNotes/15453699439742.html"/>
    <updated>2018-12-21T13:25:43+08:00</updated>
    <id>www.lonelyor.org/lonelyorNotes/15453699439742.html</id>
    <content type="html"><![CDATA[
<p>打开终端输入：<br/>
 <code>ssh -D 1085 -p 6754 root@xx.xx.xx.xx</code><br/>
 然后输入密码即可。xx即远程服务器ip。<br/>
 这意味着本地1085端口被转发到了远程服务器的6754上，然后在浏览器配置socks5代理：127.0.0.1 1085<br/>
 就可以科学上网了。</p>

<p>如果不稳定，可以考虑使用autossh。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[扫描网站备份文件思路]]></title>
    <link href="www.lonelyor.org/lonelyorNotes/15453600721143.html"/>
    <updated>2018-12-21T10:41:12+08:00</updated>
    <id>www.lonelyor.org/lonelyorNotes/15453600721143.html</id>
    <content type="html"><![CDATA[
<p>sk15大佬提供一个思路，使用备份文件名list+域名list2扫描，这样每次循环都是一个备份文件名扫描list2次。<br/>
如果使用域名list2+备份文件名list1则每次循环都是一个域名就会扫描list1次（这样由于请求频次高容易导致服务器宕机）</p>

<p>大佬还提供了一个更有意思的方法，将list1和list2做成一个list，然后将其打乱，再扫描。（骚思路就像好算法，是编程的精髓。）</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nano常见设置，如语法高亮、启用行号、启用鼠标等]]></title>
    <link href="www.lonelyor.org/lonelyorNotes/15453579778110.html"/>
    <updated>2018-12-21T10:06:17+08:00</updated>
    <id>www.lonelyor.org/lonelyorNotes/15453579778110.html</id>
    <content type="html"><![CDATA[
<p>下载nano<br/>
linux根据包管理不同，使用不通的命令。<br/>
macosx使用brew安装。</p>

<p>编辑（没有就创建）配置文件<br/>
nano ～/.nanorc<br/>
然后添加以下内容</p>

<pre class="line-numbers"><code class="language-text"># 语法高亮
include &quot;/usr/share/nano/*.nanorc&quot;
</code></pre>

<p>或者</p>

<pre class="line-numbers"><code class="language-text"># 语法高亮
include &quot;/usr/local/share/nano/*.nanorc&quot;
</code></pre>

<p>这里include哪一个主要取决于nanorc的具体位置。通常linux在share，macosx在local/share。<br/>
其他内容如：</p>

<pre class="line-numbers"><code class="language-text"># 启用行号
set linenumbers
# 平滑滚动
set smooth
# 自动缩进
set autoindent
# tab为空格
set tabstospaces
# 启用鼠标
set mouse
</code></pre>

<p>然后保存，重新打开终端，即可发现设置生效，以上方法适用于linux和macosx。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux查看磁盘空间占用情况]]></title>
    <link href="www.lonelyor.org/lonelyorNotes/15453576869884.html"/>
    <updated>2018-12-21T10:01:26+08:00</updated>
    <id>www.lonelyor.org/lonelyorNotes/15453576869884.html</id>
    <content type="html"><![CDATA[
<p>主要是使用 df 命令，使用 df --help 可以查看更多选项。</p>

<p>举例：<br/>
df -k 以KB为单位显示磁盘使用量和占用率。<br/>
df -k 以M×××</p>

<p>使用“du -ck /home”命令，列出home目录下所有文件或目录占用的大小，以KB作为计量单位。以及统计出当前home目录占用的总大小。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[crontab设置定时任务]]></title>
    <link href="www.lonelyor.org/lonelyorNotes/15453574952135.html"/>
    <updated>2018-12-21T09:58:15+08:00</updated>
    <id>www.lonelyor.org/lonelyorNotes/15453574952135.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>文章参考自：<a href="http://blog.csdn.net/xiaochuige/article/details/49252741">http://blog.csdn.net/xiaochuige/article/details/49252741</a> 感谢作者。</p>
</blockquote>

<p>crontab的基本格式：</p>

<pre class="line-numbers"><code class="language-text">* * * * * command
几个星号分别为：分 时 日 月 周，最后是要执行的命令。
分：0~59
时：0~23
日：1~31
月：1~12
周：0～6（0表示星期天）
除了数字还有几个个特殊的符号就是* / - ：
* 代表所有的取值范围内的数字
/ 代表每的意思
*/5 表示每5个单位
- 代表从某个数字到某个数字
, 分开几个离散的数字
</code></pre>

<p>配置文件的一些例子：</p>

<pre class="line-numbers"><code class="language-text">0 3 * * * /root/test.sh 每天凌晨3点执行test.sh文件
* 23-7/1 * * * /root/lnmp restart 晚上11点到早上7点之间，每隔一小时重启lnmp套件
*/30 * * * * /usr/sbin/ntpdate 每半小时同步一下时间
0 23 * * 6 /lnmp restart 每星期六的11 : 00 pm重启重启lnmp套件。
*/1 * * * * echo &quot;i am running.&quot;&gt;&gt;/tmp/running.txt 每隔1分钟向/tmp/running.txt写一个&quot;i am running.&quot;字符串。
</code></pre>

<p>运行<br/>
我以为编辑crontab保存后会自动执行，其实不然，必须通过重启cron才可以，命令如下：<br/>
启动/etc/init.d/cron start<br/>
关闭/etc/init.d/cron stop<br/>
重启/etc/init.d/cron restart</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Atom设置和取消代理]]></title>
    <link href="www.lonelyor.org/lonelyorNotes/15453572892743.html"/>
    <updated>2018-12-21T09:54:49+08:00</updated>
    <id>www.lonelyor.org/lonelyorNotes/15453572892743.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">设置本地上游代理</h2>

<p>apm config set http-proxy socks5:127.0.0.1:1080<br/>
apm config set https-proxy socks5:127.0.0.1:1080</p>

<h2 id="toc_1">取消SSL</h2>

<p>apm config set strict-ssl false</p>

<h2 id="toc_2">取消代理</h2>

<p>apm config set http-proxy null<br/>
apm config set https-proxy null</p>

<h2 id="toc_3">查看代理设置</h2>

<p>apm config get http-proxy<br/>
apm config get https-proxy</p>

<p>编辑～/.atom/.apmrc文件，配置为：<br/>
strict-ssl=false<br/>
http_proxy = socks5: 127.0.0.1:1080<br/>
https_proxy = socks5: 127.0.0.1:1080</p>

]]></content>
  </entry>
  
</feed>
